
[{"content":"はい今週の週報です。\n東京行きから帰ってきて色々してたら毛根な時間だよ早いよ時間経つの。\n今週は新入生勧誘に色々動いておりました。忙しくないけど忙しいです。\nなんせ人がいないとか人が消えたとか何とかで動かんなん。\nしんどいよーーー\nそういやゲーセンで新しい筐体が動き始めましたね\nワイは稼働日に行ってきたので写真を上げときます。\n最近のゲーセン、だいぶゲーセンでしかできないことを考えようとしている気がしてて良い\nクレーンゲームに侵食される前に頑張ってゲーム機残ってほしいわね\n今回のギタドラはかなり低音つよつよでプレイしてて楽しい\n個人的にかなり刺さりましたわ\nドラムマニアの譜面が見やすくなってて良かった\nギターの方も譜面を長めにしてほしかったなあ…\nけどツアマスはすぐサ終すると思うの\nあまりにもファンゲー過ぎてアレ\n初心者が入る余地が無さすぎてなんか……\nあーいうタイプのゲームはPSとかソシャゲで出すべきであってアーケードゲーで出すべきじゃない\nおわり。\n","date":"2025/03/28 14:58","externalUrl":null,"permalink":"/weekly/20250328/","section":"週報一覧","summary":"\u003cp\u003eはい今週の週報です。\u003cbr\u003e\n東京行きから帰ってきて色々してたら毛根な時間だよ早いよ時間経つの。\u003c/p\u003e\n\u003cp\u003e今週は新入生勧誘に色々動いておりました。忙しくないけど忙しいです。\u003cbr\u003e\nなんせ人がいないとか人が消えたとか何とかで動かんなん。\u003cbr\u003e\nしんどいよーーー\u003c/p\u003e\n\u003cp\u003eそういやゲーセンで新しい筐体が動き始めましたね\u003cbr\u003e\nワイは稼働日に行ってきたので写真を上げときます。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250325_151700562.MP_hu_1ab1dd692e5319f0.jpg 330w,\n        /weekly/20250328/PXL_20250325_151700562.MP_hu_f4e4daabcbdcd007.jpg 660w,\n        /weekly/20250328/PXL_20250325_151700562.MP_hu_fae08a4964342c4c.jpg 1024w,\n        /weekly/20250328/PXL_20250325_151700562.MP_hu_cec747330109d32b.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250325_151700562.MP_hu_f4e4daabcbdcd007.jpg\"\n        alt=\"gitadora\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250323_161404292_hu_bc57f5ae4988dbb7.jpg 330w,\n        /weekly/20250328/PXL_20250323_161404292_hu_9a66750fdeb48499.jpg 660w,\n        /weekly/20250328/PXL_20250323_161404292_hu_6a3053d8fd37a1b9.jpg 1024w,\n        /weekly/20250328/PXL_20250323_161404292_hu_2aaee256282292fc.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250323_161404292_hu_9a66750fdeb48499.jpg\"\n        alt=\"medal2\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250323_161421029_hu_e51d1583ce711915.jpg 330w,\n        /weekly/20250328/PXL_20250323_161421029_hu_ee91361666adefff.jpg 660w,\n        /weekly/20250328/PXL_20250323_161421029_hu_67668988ccd6a3d6.jpg 1024w,\n        /weekly/20250328/PXL_20250323_161421029_hu_5682fef5bafe7cc1.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250323_161421029_hu_ee91361666adefff.jpg\"\n        alt=\"medal1\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250323_070704209_hu_ff7140501a2ae224.jpg 330w,\n        /weekly/20250328/PXL_20250323_070704209_hu_82a4917d4bf3cfec.jpg 660w,\n        /weekly/20250328/PXL_20250323_070704209_hu_2fb26c3db0014ae5.jpg 1024w,\n        /weekly/20250328/PXL_20250323_070704209_hu_c9d37d1e64eb8d8e.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250323_070704209_hu_82a4917d4bf3cfec.jpg\"\n        alt=\"hannyu\"\n      /\u003e\n      \n    \u003c/figure\u003e\n \u003cbr\u003e\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250323_161542403_hu_9d85739e7f312e9f.jpg 330w,\n        /weekly/20250328/PXL_20250323_161542403_hu_7d6f5c9133978c3f.jpg 660w,\n        /weekly/20250328/PXL_20250323_161542403_hu_9f30f056f9a2710b.jpg 1024w,\n        /weekly/20250328/PXL_20250323_161542403_hu_293634e91fe160a4.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250323_161542403_hu_7d6f5c9133978c3f.jpg\"\n        alt=\"kadoumae\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250326_000533718_hu_f1bc8379755b7497.jpg 330w,\n        /weekly/20250328/PXL_20250326_000533718_hu_285414eb0b053b0a.jpg 660w,\n        /weekly/20250328/PXL_20250326_000533718_hu_38fcf9f36f328721.jpg 1024w,\n        /weekly/20250328/PXL_20250326_000533718_hu_51796bfbbd255188.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250326_000533718_hu_285414eb0b053b0a.jpg\"\n        alt=\"kadougo\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250326_002016002_hu_1e167f555bbf11cc.jpg 330w,\n        /weekly/20250328/PXL_20250326_002016002_hu_b075dfd07b772bd9.jpg 660w,\n        /weekly/20250328/PXL_20250326_002016002_hu_929d98e0d892ad24.jpg 1024w,\n        /weekly/20250328/PXL_20250326_002016002_hu_df1751540aea19e6.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250326_002016002_hu_b075dfd07b772bd9.jpg\"\n        alt=\"livefailed\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250328/PXL_20250326_001350887_hu_7d3c1051254b2949.jpg 330w,\n        /weekly/20250328/PXL_20250326_001350887_hu_93a026527a48dabd.jpg 660w,\n        /weekly/20250328/PXL_20250326_001350887_hu_3e5c463a44fc7bea.jpg 1024w,\n        /weekly/20250328/PXL_20250326_001350887_hu_bc794154d1ce4908.jpg 2x\"\n        src=\"/weekly/20250328/PXL_20250326_001350887_hu_93a026527a48dabd.jpg\"\n        alt=\"photoerror\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"20250328","type":"weekly"},{"content":"","date":"2025/03/28 14:58","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025/03/28 14:58","externalUrl":null,"permalink":"/","section":"じゃがびぃのサイト","summary":"","title":"じゃがびぃのサイト","type":"page"},{"content":"","date":"2025/03/28 14:58","externalUrl":null,"permalink":"/categories/%E9%80%B1%E5%A0%B1/","section":"Categories","summary":"","title":"週報","type":"categories"},{"content":"週報書くの完全に忘れてたわごめｗ\n週報書くの忘れた理由としては東京出張してたからですﾊｲ。\n今後は気を付けますわ～～～\nせっかくなので東京出張した帰りに寄ったとことか写真とか載せましょうかね 大変だったけど楽しかったです。\n出張内容にはかなり不満ですけども。。。まあ今更ウダウダ言っても仕方ないじゃんね。\nこれを糧にして生きていこうと思います。\nそれはそれとして、ワイのツイートに出張のために作ったアプリがあるのでよかったらいいねしてってください。\nほぼ誰にも頑張ったねって言ってもらえなくて悲しいので…\nおわり。\n","date":"2025/03/25 22:03","externalUrl":null,"permalink":"/weekly/20250321/","section":"週報一覧","summary":"\u003cp\u003e週報書くの完全に忘れてたわごめｗ\u003cbr\u003e\n週報書くの忘れた理由としては東京出張してたからですﾊｲ。\u003cbr\u003e\n今後は気を付けますわ～～～\u003c/p\u003e\n\u003cp\u003eせっかくなので東京出張した帰りに寄ったとことか写真とか載せましょうかね\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250321/PXL_20250320_000126451_hu_5b28972dc3e53616.jpg 330w,\n        /weekly/20250321/PXL_20250320_000126451_hu_6a68a3203c9e9490.jpg 660w,\n        /weekly/20250321/PXL_20250320_000126451_hu_15fee6985bfcccca.jpg 1024w,\n        /weekly/20250321/PXL_20250320_000126451_hu_fb75e80b801607db.jpg 2x\"\n        src=\"/weekly/20250321/PXL_20250320_000126451_hu_6a68a3203c9e9490.jpg\"\n        alt=\"siomi\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250321/PXL_20250320_225639673_hu_7c893c9929b187ac.jpg 330w,\n        /weekly/20250321/PXL_20250320_225639673_hu_dedc9ec5bd2873b.jpg 660w,\n        /weekly/20250321/PXL_20250320_225639673_hu_ca2784b8df90c09f.jpg 1024w,\n        /weekly/20250321/PXL_20250320_225639673_hu_6cbd59a0e4ea1ded.jpg 2x\"\n        src=\"/weekly/20250321/PXL_20250320_225639673_hu_dedc9ec5bd2873b.jpg\"\n        alt=\"nazonobasyo\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250321/PXL_20250321_105623369_hu_5a38a7cdd66dc21e.jpg 330w,\n        /weekly/20250321/PXL_20250321_105623369_hu_5b0590ed7911b8b0.jpg 660w,\n        /weekly/20250321/PXL_20250321_105623369_hu_93dc7309f3dc2c14.jpg 1024w,\n        /weekly/20250321/PXL_20250321_105623369_hu_f20c7268a715be28.jpg 2x\"\n        src=\"/weekly/20250321/PXL_20250321_105623369_hu_5b0590ed7911b8b0.jpg\"\n        alt=\"akihabara\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250321/PXL_20250321_105627105_hu_21d22196a003e07b.jpg 330w,\n        /weekly/20250321/PXL_20250321_105627105_hu_70545b84b12c06bb.jpg 660w,\n        /weekly/20250321/PXL_20250321_105627105_hu_b400f84e860021d0.jpg 1024w,\n        /weekly/20250321/PXL_20250321_105627105_hu_1c7be31f6fcc1860.jpg 2x\"\n        src=\"/weekly/20250321/PXL_20250321_105627105_hu_70545b84b12c06bb.jpg\"\n        alt=\"right\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250321/PXL_20250321_105634656_hu_f4f23fd4926ad7f2.jpg 330w,\n        /weekly/20250321/PXL_20250321_105634656_hu_110f34a2cb1114ad.jpg 660w,\n        /weekly/20250321/PXL_20250321_105634656_hu_65c422b440431274.jpg 1024w,\n        /weekly/20250321/PXL_20250321_105634656_hu_391434fc9601905b.jpg 2x\"\n        src=\"/weekly/20250321/PXL_20250321_105634656_hu_110f34a2cb1114ad.jpg\"\n        alt=\"left\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250321/PXL_20250321_105802928_hu_319fb21800b50074.jpg 330w,\n        /weekly/20250321/PXL_20250321_105802928_hu_882d89d43c73d6c2.jpg 660w,\n        /weekly/20250321/PXL_20250321_105802928_hu_586b12bf95801bbb.jpg 1024w,\n        /weekly/20250321/PXL_20250321_105802928_hu_9129c07c107a0ea7.jpg 2x\"\n        src=\"/weekly/20250321/PXL_20250321_105802928_hu_882d89d43c73d6c2.jpg\"\n        alt=\"umamusume\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e大変だったけど楽しかったです。\u003cbr\u003e\n出張内容にはかなり不満ですけども。。。まあ今更ウダウダ言っても仕方ないじゃんね。\u003cbr\u003e\nこれを糧にして生きていこうと思います。\u003c/p\u003e\n\u003cp\u003eそれはそれとして、\u003ca href=\"https://x.com/Jyaga_bee/status/1903118197307650191\" target=\"_blank\"\u003eワイのツイート\u003c/a\u003eに出張のために作ったアプリがあるのでよかったらいいねしてってください。\u003cbr\u003e\nほぼ誰にも頑張ったねって言ってもらえなくて悲しいので…\u003c/p\u003e\n\u003cp\u003eおわり。\u003c/p\u003e","title":"20250321","type":"weekly"},{"content":" はじめに # 皆さんAndroidStudioをmeerkatへアップデートしてらっしゃるでしょうか。ワイはノリと勢いで更新してしまいました。\nアプデしてから日本語化できないことに気づき、1週間くらい我慢してたけど耐えられなくなったので日本語化しました。\n備忘録的なアレを残しておきます\nプラグインあるんじゃないの # ってことですよね。ﾊｲ。laybugはあるけどmeerkatは無いです。日本語化プラグインがバージョン不一致でエラー出て使えんなりました。\nこのプラグインは更新されるかどうか分からんらしいです。\nどうやらInteliJ IDEに日本語が内蔵されてしまった関係でメンテナンスされないらしい。控えめに言ってクソ\n日本語化する方法 # ということで解説していきます。\nInteliJ IDE Comunity Editionをインストールする pluginフォルダから日本語化プラグインを頂く Android Studioのpluginフォルダへコピー Appearance \u0026amp; Behavior\u0026gt;System Settings\u0026gt;Language and RegionのLanguageを日本語に変更 こんだけです。 以下に注意点だけまとめておきます。\n注意点 # InteliJ IDE のpluginフォルダパス:\nC:\\Users\\Users\\AppData\\Local\\Programs\\IntelliJ IDEA Community Edition\\plugins この中にlocalization-jaがあるのでコピー\nAndroid Studioのpluginフォルダパス:\nC:\\Users\\Users\\AppData\\Local\\Programs\\Android Studio\\plugins 先ほどコピーしてきたディレクトリごとペースト\nlinuxは知らない。いずれはやらんとあかんねえ…\nおわりに # 以上です。備忘録なので信頼性等々求めてる人はよそ様の記事なりchatgptなりに聞いてください。\n日本語化する気あるのかないのか分からんの何とかしちくり～～～～\nおわり。\n","date":"2025/03/17 10:34","externalUrl":null,"permalink":"/posts/androidstudiolanguage/","section":"記事一覧","summary":"\u003ch2 class=\"relative group\"\u003eはじめに \n    \u003cdiv id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e皆さんAndroidStudioをmeerkatへアップデートしてらっしゃるでしょうか。ワイはノリと勢いで更新してしまいました。\u003cbr\u003e\nアプデしてから日本語化できないことに気づき、1週間くらい我慢してたけど耐えられなくなったので日本語化しました。\u003cbr\u003e\n備忘録的なアレを残しておきます\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003eプラグインあるんじゃないの \n    \u003cdiv id=\"%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%82%E3%82%8B%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%AE\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%82%E3%82%8B%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%AE\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eってことですよね。ﾊｲ。laybugはあるけどmeerkatは無いです。日本語化プラグインがバージョン不一致でエラー出て使えんなりました。\u003cbr\u003e\n\u003ca href=\"https://plugins.jetbrains.com/plugin/13964-japanese-language-pack------/versions\" target=\"_blank\"\u003eこのプラグイン\u003c/a\u003eは更新されるかどうか分からんらしいです。\u003cbr\u003e\nどうやらInteliJ IDEに日本語が内蔵されてしまった関係でメンテナンスされないらしい。\u003cdel\u003e控えめに言ってクソ\u003c/del\u003e\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e日本語化する方法 \n    \u003cdiv id=\"%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eということで解説していきます。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInteliJ IDE Comunity Editionをインストールする\u003c/li\u003e\n\u003cli\u003epluginフォルダから日本語化プラグインを頂く\u003c/li\u003e\n\u003cli\u003eAndroid Studioのpluginフォルダへコピー\u003c/li\u003e\n\u003cli\u003eAppearance \u0026amp; Behavior\u0026gt;System Settings\u0026gt;Language and RegionのLanguageを日本語に変更\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eこんだけです。\n以下に注意点だけまとめておきます。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e注意点 \n    \u003cdiv id=\"%E6%B3%A8%E6%84%8F%E7%82%B9\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eInteliJ IDE のpluginフォルダパス:\u003c/p\u003e","title":"Android Studio Meerkat | 2024.3.1 を日本語化した話","type":"posts"},{"content":"今週の週報です。 先週の週報を上げた日に名古屋へ用事があったのでお泊りで行ってきました。 以下に画像をてけとーに貼っておきます。\n色々忙しかったんですけど、ゲーセン巡りができたので良かったと思います。\nレトロゲー置いてるゲーセン多くて思ったより楽しめたじゃんね。\nマッピーちゃんが置いてあったゲーセンあったけど、先客がめっちゃ遊んでてプレイできなかったのが悲しかったです。\nあとアケマスがもう置いてあってびっくらこいた。こっちじゃ考えられねーじゃんね。\nラウワンとかなら稼働前でも置いてるのかしら。置いてないだろうなあ……\nまあこんなもんですかね。\n忙しくて書く内容が無いようｗ\n終わり。\n","date":"2025/03/14 11:16","externalUrl":null,"permalink":"/weekly/20250314/","section":"週報一覧","summary":"\u003cp\u003e今週の週報です。\n先週の週報を上げた日に名古屋へ用事があったのでお泊りで行ってきました。\n以下に画像をてけとーに貼っておきます。\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_051114493_hu_2a8c0a7d1d4fb122.jpg 330w,\n        /weekly/20250314/PXL_20250309_051114493_hu_6b70024782aa676b.jpg 660w,\n        /weekly/20250314/PXL_20250309_051114493_hu_6a78ad8b24522498.jpg 1024w,\n        /weekly/20250314/PXL_20250309_051114493_hu_be403223dce60940.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_051114493_hu_6b70024782aa676b.jpg\"\n        alt=\"pop\u0026rsquo;n\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_081659252_hu_e077f4b065eda36b.jpg 330w,\n        /weekly/20250314/PXL_20250309_081659252_hu_4804c7e3c55de90b.jpg 660w,\n        /weekly/20250314/PXL_20250309_081659252_hu_81679bb58056dab1.jpg 1024w,\n        /weekly/20250314/PXL_20250309_081659252_hu_7b196f12ec1a1abd.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_081659252_hu_4804c7e3c55de90b.jpg\"\n        alt=\"pop\u0026rsquo;n2\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_051901792_hu_ad18b06ca3ed23bf.jpg 330w,\n        /weekly/20250314/PXL_20250309_051901792_hu_4fb0baec889d57db.jpg 660w,\n        /weekly/20250314/PXL_20250309_051901792_hu_ba78998d1394493f.jpg 1024w,\n        /weekly/20250314/PXL_20250309_051901792_hu_7905b95e48633424.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_051901792_hu_4fb0baec889d57db.jpg\"\n        alt=\"サ終ゲー\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_071924311_hu_30a25ec38142c162.jpg 330w,\n        /weekly/20250314/PXL_20250309_071924311_hu_89fab199093d8a84.jpg 660w,\n        /weekly/20250314/PXL_20250309_071924311_hu_8cb942c2505b5264.jpg 1024w,\n        /weekly/20250314/PXL_20250309_071924311_hu_6040c3a3c1787ec1.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_071924311_hu_89fab199093d8a84.jpg\"\n        alt=\"イニシャルD\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_095844142_hu_341ba2e5d97b3b30.jpg 330w,\n        /weekly/20250314/PXL_20250309_095844142_hu_2b0a30d6ae7ff8c0.jpg 660w,\n        /weekly/20250314/PXL_20250309_095844142_hu_c15537ecc1e8093e.jpg 1024w,\n        /weekly/20250314/PXL_20250309_095844142_hu_936ee6549f520e84.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_095844142_hu_2b0a30d6ae7ff8c0.jpg\"\n        alt=\"wacca\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_100111030_hu_469ab2d35bde6e2f.jpg 330w,\n        /weekly/20250314/PXL_20250309_100111030_hu_1017a3a509786089.jpg 660w,\n        /weekly/20250314/PXL_20250309_100111030_hu_25941cff09e77fbf.jpg 1024w,\n        /weekly/20250314/PXL_20250309_100111030_hu_8745ab5292e36844.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_100111030_hu_1017a3a509786089.jpg\"\n        alt=\"groovecoaster\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_073839910_hu_833c796d6e34a934.jpg 330w,\n        /weekly/20250314/PXL_20250309_073839910_hu_c1371ff8f5fcbb25.jpg 660w,\n        /weekly/20250314/PXL_20250309_073839910_hu_afdfde7fdc81afcc.jpg 1024w,\n        /weekly/20250314/PXL_20250309_073839910_hu_353c12c77b3bb602.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_073839910_hu_c1371ff8f5fcbb25.jpg\"\n        alt=\"アケマス1\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_095921548_hu_3c661187fb5740a0.jpg 330w,\n        /weekly/20250314/PXL_20250309_095921548_hu_232886c83b477d54.jpg 660w,\n        /weekly/20250314/PXL_20250309_095921548_hu_252e6dff88450d57.jpg 1024w,\n        /weekly/20250314/PXL_20250309_095921548_hu_a13c24ea9bc45801.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_095921548_hu_232886c83b477d54.jpg\"\n        alt=\"アケマス2\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_095930801_hu_c4742075623b1abc.jpg 330w,\n        /weekly/20250314/PXL_20250309_095930801_hu_f9f44255b7d2f244.jpg 660w,\n        /weekly/20250314/PXL_20250309_095930801_hu_a8490ffeb53758ac.jpg 1024w,\n        /weekly/20250314/PXL_20250309_095930801_hu_1b20e7d4026a7af0.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_095930801_hu_f9f44255b7d2f244.jpg\"\n        alt=\"アケマス3\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /weekly/20250314/PXL_20250309_095937570_hu_b5830ec535423957.jpg 330w,\n        /weekly/20250314/PXL_20250309_095937570_hu_2028a1124bb40ccb.jpg 660w,\n        /weekly/20250314/PXL_20250309_095937570_hu_76dadba4209b2fac.jpg 1024w,\n        /weekly/20250314/PXL_20250309_095937570_hu_b6ed70d89997b91b.jpg 2x\"\n        src=\"/weekly/20250314/PXL_20250309_095937570_hu_2028a1124bb40ccb.jpg\"\n        alt=\"アケマス4\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"20250314","type":"weekly"},{"content":"今週の週報です。\n20250303のやつはタダの宣言なので週報って書いてあるけど週報じゃないです。\nClaude3.7のおかげでだいぶhugoのことを理解できるようになってきました。\nこのファイルもコマンドで生成できるようになりました。素晴らしい。\n改行だけめんどくさいけどClaudeくん曰くmarkdownのお作法らしいので我慢します。\n今週やったことねえ…家のデスクトップに入れたAndroid Studioだと何故かビルドできなくてｺﾞﾆｮｺﾞﾆｮしてたくらい？\nこの問題よう分からんのですよ。どうやらfastddsのlibs.so(だっけ？)か何かのファイルが必要だけどディレクトリに存在しないって怒られるんですよね\nビルドする前に全部インポートしたはずなんだけどなあ…\n別環境のwindowsとかlinuxとか使うとビルドできるから、多分何か入れ忘れてるんだろうけど思いつかない。\n誰か助けてー\nそもそもkotlinでc++使うこと自体間違ってるのかな…\nあと最近、レンチンでご飯を炊き始めました。\n作り始めたときは芯が残ってしまってたけど、だいぶマシなものを錬成できるようになりました。\n吸水の時間は大事。偉大。\nこんなもんですかね。週報で書く中身のテンプレ作らないとしんどすぎてアカンですね。\n来週のやつまでに作れたら作ってみよかな\n終わり。\n","date":"2025/03/07 11:24","externalUrl":null,"permalink":"/weekly/20250307/","section":"週報一覧","summary":"\u003cp\u003e今週の週報です。\u003cbr\u003e\n20250303のやつはタダの宣言なので週報って書いてあるけど週報じゃないです。\u003c/p\u003e\n\u003cp\u003eClaude3.7のおかげでだいぶhugoのことを理解できるようになってきました。\u003cbr\u003e\nこのファイルもコマンドで生成できるようになりました。素晴らしい。\u003cbr\u003e\n改行だけめんどくさいけどClaudeくん曰くmarkdownのお作法らしいので我慢します。\u003c/p\u003e\n\u003cp\u003e今週やったことねえ…家のデスクトップに入れたAndroid Studioだと何故かビルドできなくてｺﾞﾆｮｺﾞﾆｮしてたくらい？\u003cbr\u003e\nこの問題よう分からんのですよ。どうやらfastddsのlibs.so(だっけ？)か何かのファイルが必要だけどディレクトリに存在しないって怒られるんですよね\u003cbr\u003e\nビルドする前に全部インポートしたはずなんだけどなあ…\u003cbr\u003e\n別環境のwindowsとかlinuxとか使うとビルドできるから、多分何か入れ忘れてるんだろうけど思いつかない。\u003cbr\u003e\n誰か助けてー\u003cbr\u003e\nそもそもkotlinでc++使うこと自体間違ってるのかな…\u003c/p\u003e\n\u003cp\u003eあと最近、レンチンでご飯を炊き始めました。\u003cbr\u003e\n作り始めたときは芯が残ってしまってたけど、だいぶマシなものを錬成できるようになりました。\u003cbr\u003e\n吸水の時間は大事。偉大。\u003c/p\u003e\n\u003cp\u003eこんなもんですかね。週報で書く中身のテンプレ作らないとしんどすぎてアカンですね。\u003cbr\u003e\n来週のやつまでに作れたら作ってみよかな\u003c/p\u003e\n\u003cp\u003e終わり。\u003c/p\u003e","title":"20250307","type":"weekly"},{"content":" memo # 個人的に忘れそうだったのでメモ\nHugoで記事に画像を添付する方法 # Hugoで記事に画像を添付するには、主に2つの方法があります：\n1. Page Bundle方式（推奨） # 記事と画像を同じフォルダに配置する方法です。これが最も管理しやすい方法です：\ncontent/ └── posts/ └── my-post/ ├── index.md # 記事本文 ├── image1.jpg # 画像ファイル └── image2.png # 画像ファイル 手順 # まず記事用のディレクトリを作成 hugo new content/posts/my-post/index.md 同じディレクトリ内に画像を配置 Markdown内で相対パスで参照 本文 # 以下は画像です：\n![画像の説明](image1.jpg \u0026#34;画像のタイトル\u0026#34;) サイズ指定もできます： ![画像の説明](image2.png \u0026#34;画像のタイトル\u0026#34;){width=300px} 2. 静的ファイル方式 # 共通で使いたい画像を static ディレクトリに配置する方法：\n# static/images/ ディレクトリに画像を配置 Markdown内での参照：\n![画像の説明](/images/sample.jpg \u0026#34;画像のタイトル\u0026#34;) 注意事項 # 画像ファイル名には日本語や特殊文字を避け、英数字とハイフンを使用するのが安全です 大きな画像は最適化してからアップロードしましょう 常に代替テキスト（alt属性）を設定しましょう Blowfishテーマでは、Page Bundle方式が特に推奨されており、画像処理機能なども利用できます。\nディレクトリへテンプレートを使用して記事を作成するコマンド # 週報用のテンプレート（アーキタイプ）を使って ディレクトリに新しい記事を作成するには、以下のコマンドを使用します：\n**hugo new **\u0026ndash;kind テンプレ ディレクトリ/記事タイトル\n例えば、「2025年3月第1週」という週報を作成したい場合：\nhugo new --kind weekly weekly/2025年3月第1週 このコマンドを実行すると、content/weekly/2025年3月第1週/index.mdが作成されます。\n\u0026ndash;kindオプションは「どのテンプレート（アーキタイプ）を使用するか」を指定するためのフラグです。\n詳細説明 # アーキタイプの選択 \u0026ndash;kind weekly は weekly フォルダ内のテンプレートを使用する \u0026ndash;kind posts は posts フォルダ内のテンプレートを使用する ディレクトリ構造の作成 単にファイルだけでなく、ディレクトリ構造も含めた複雑なテンプレートを適用 テンプレートの優先順位 \u0026ndash;kind を指定しない場合、デフォルトテンプレート（archetypes/default.md）が使用される 普通の記事を作成したい場合 # hugo new content post/AndroidStudioLanguageというコマンドは正しくありません。以下のように修正してください：\nhugo new post/AndroidStudioLanguage.md 「content」という単語は不要で、ファイル拡張子（.md）を追加する必要があります。\n","date":"2025/03/03 23:20","externalUrl":null,"permalink":"/weekly/memo/memo/","section":"週報一覧","summary":"\u003ch1 class=\"relative group\"\u003ememo \n    \u003cdiv id=\"memo\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#memo\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e個人的に忘れそうだったのでメモ\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003eHugoで記事に画像を添付する方法 \n    \u003cdiv id=\"hugo%E3%81%A7%E8%A8%98%E4%BA%8B%E3%81%AB%E7%94%BB%E5%83%8F%E3%82%92%E6%B7%BB%E4%BB%98%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#hugo%E3%81%A7%E8%A8%98%E4%BA%8B%E3%81%AB%E7%94%BB%E5%83%8F%E3%82%92%E6%B7%BB%E4%BB%98%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eHugoで記事に画像を添付するには、主に2つの方法があります：\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1. Page Bundle方式（推奨） \n    \u003cdiv id=\"1-page-bundle%E6%96%B9%E5%BC%8F%E6%8E%A8%E5%A5%A8\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#1-page-bundle%E6%96%B9%E5%BC%8F%E6%8E%A8%E5%A5%A8\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e記事と画像を同じフォルダに配置する方法です。これが最も管理しやすい方法です：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003econtent/\n└── posts/\n    └── my-post/\n        ├── index.md  # 記事本文\n        ├── image1.jpg  # 画像ファイル\n        └── image2.png  # 画像ファイル\n    \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3 class=\"relative group\"\u003e手順 \n    \u003cdiv id=\"%E6%89%8B%E9%A0%86\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%89%8B%E9%A0%86\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eまず記事用のディレクトリを作成\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehugo new content/posts/my-post/index.md\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e同じディレクトリ内に画像を配置\u003c/li\u003e\n\u003cli\u003eMarkdown内で相対パスで参照\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e本文 \n    \u003cdiv id=\"%E6%9C%AC%E6%96%87\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%9C%AC%E6%96%87\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e以下は画像です：\u003c/p\u003e","title":"週報メモ","type":"weekly"},{"content":" はじめに # 今回もテスト回です。ほとんど日記。\n真面目なものを探している人は帰ってください。\nアプリを作る経緯 # じゃがびぃさんが入ってるプロジェクトのえらいさんからアプリを作れと言われてしまいました。どうやら謎の大会で使用するらしいです。\nbluetoothでモジュールと接続してコントローラーの値を送るだけの簡単なアプリですが、めんどくさがったじゃがびぃさんは全部丸投げすることにしました。\n丸投げするにあたって # kotlinなんも分からんかったので先ずは勉強することにしました。\nkotlinはjavaとほぼ同じで、かつjetpack compose関係のコードだけ覚えたら終わりだったので楽でした。\nコード全部丸投げする # 最初はよう分からんので、\nアレ実装したい って指示を出してました。\nこれだと精度が悪いということに気づいたので、\nこれ実装した。これを使ってアレやって。 エラー出た。以下にエラー文書くから原因と修正方法を出して。 これ実装したい。このコード使って出して。 ってやったら使い物になるようなコードを出力するようになりました。\n後半になると、\n6時間で新規アプリの作成 旧アプリと新規アプリの機能追加 旧アプリと新規アプリの通信 までできるようになりました。\n得たこと # なんもないです。\nむしろプログラミングの授業でAI使ったのバレて落単ギリギリまで点数引かれた\n時間だけは節約できたかな。\n感じたこと # ワイみたいなど素人がこんなもん使えるようになっちゃったら、もうダメになると思いました。\nダメになると感じた理由として、\nコードの良し悪しが分からない オフラインでコードの修正ができない コードがめっちゃ長くなる コードが学習されてしまう 視認性が悪くなる …などなど。\nほぼほぼど素人がこれだけのものを短時間で作れる時代になったのはかなり脅威だと思います。\nこれからのプログラマーは、想定外のエラーやその他諸々が出た時にオフラインでコード書けないと存在意義が無いなと思いました。現段階でワイは存在意義が無いです。\nもうちょい地に足付けて生きようと思いました。\nおわりに # 言ってはいけないことがあまりにも多すぎて抽象的になってしまいました。本当に申し訳ない。\nこの経験、いい意味でも悪い意味でもすごく刺激になりました。真面目に勉強しようと思います。\nおわり。\n","date":"2025/03/03 22:40","externalUrl":null,"permalink":"/posts/makeappinclaude3.7/","section":"記事一覧","summary":"\u003ch2 class=\"relative group\"\u003eはじめに \n    \u003cdiv id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e今回もテスト回です。ほとんど日記。\u003cbr\u003e\n真面目なものを探している人は帰ってください。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eアプリを作る経緯 \n    \u003cdiv id=\"%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B%E7%B5%8C%E7%B7%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B%E7%B5%8C%E7%B7%AF\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eじゃがびぃさんが入ってるプロジェクトのえらいさんからアプリを作れと言われてしまいました。どうやら謎の大会で使用するらしいです。\u003c/p\u003e\n\u003cp\u003ebluetoothでモジュールと接続してコントローラーの値を送るだけの簡単なアプリですが、めんどくさがったじゃがびぃさんは全部丸投げすることにしました。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e丸投げするにあたって \n    \u003cdiv id=\"%E4%B8%B8%E6%8A%95%E3%81%92%E3%81%99%E3%82%8B%E3%81%AB%E3%81%82%E3%81%9F%E3%81%A3%E3%81%A6\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%B8%B8%E6%8A%95%E3%81%92%E3%81%99%E3%82%8B%E3%81%AB%E3%81%82%E3%81%9F%E3%81%A3%E3%81%A6\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003ekotlinなんも分からんかったので先ずは勉強することにしました。\u003cbr\u003e\nkotlinはjavaとほぼ同じで、かつjetpack compose関係のコードだけ覚えたら終わりだったので楽でした。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eコード全部丸投げする \n    \u003cdiv id=\"%E3%82%B3%E3%83%BC%E3%83%89%E5%85%A8%E9%83%A8%E4%B8%B8%E6%8A%95%E3%81%92%E3%81%99%E3%82%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E5%85%A8%E9%83%A8%E4%B8%B8%E6%8A%95%E3%81%92%E3%81%99%E3%82%8B\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e最初はよう分からんので、\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eアレ実装したい\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eって指示を出してました。\u003cbr\u003e\nこれだと精度が悪いということに気づいたので、\u003c/p\u003e","title":"Claude 3.7でアプリを作った話","type":"posts"},{"content":"ここでは、勉強としてFastDDSの日本語訳したので載せています。\n自分のメモなので正しくないです。公式のドキュメントを読んでください。\n","date":"2025/03/03 22:40","externalUrl":null,"permalink":"/fastdds_manual/","section":"記事一覧","summary":"\u003cp\u003eここでは、勉強としてFastDDSの日本語訳したので載せています。\u003cbr\u003e\n自分のメモなので正しくないです。公式のドキュメントを読んでください。\u003c/p\u003e","title":"記事一覧","type":"fastdds_manual"},{"content":"","date":"2025/03/03 22:40","externalUrl":null,"permalink":"/posts/","section":"記事一覧","summary":"","title":"記事一覧","type":"posts"},{"content":" 週報 # お久しぶりです。じゃがびぃです。 特にやりたいこととか全くなかったのでサボり散らかしておりました。\n流石にもったいないお化けが出そうだったので、ちょいちょい動かしていこうと思います。\n週報なので1週間の終わりの金曜日になんか更新するということで触っていこうかなと思います。\nClaude 3.7がすごい # こいつのおかげで今書けています。 誰かに質問攻めにするより気が楽\u0026amp;答えをすぐ出してくれる。素晴らしい。 ワイみたいな知識がない人間こそ使ってはいけない代物だと思いますﾊｲ。 脳が冷える感覚がする。明らか頭が悪くなったと感じております。 やっぱ自分で考えなきゃダメだと思うの。 努力します。\nこんなもんでええですかね。 今回はテスト兼ねてますので雑にちゃちゃっと終わらせます。\n終わり。\n","date":"2025/03/03 00:00","externalUrl":null,"permalink":"/weekly/20250303/20250303/","section":"週報一覧","summary":"\u003ch1 class=\"relative group\"\u003e週報 \n    \u003cdiv id=\"%E9%80%B1%E5%A0%B1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%80%B1%E5%A0%B1\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eお久しぶりです。じゃがびぃです。\n特にやりたいこととか全くなかったのでサボり散らかしておりました。\u003c/p\u003e\n\u003cp\u003e流石にもったいないお化けが出そうだったので、ちょいちょい動かしていこうと思います。\u003c/p\u003e\n\u003cp\u003e週報なので1週間の終わりの金曜日になんか更新するということで触っていこうかなと思います。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eClaude 3.7がすごい \n    \u003cdiv id=\"claude-37%E3%81%8C%E3%81%99%E3%81%94%E3%81%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#claude-37%E3%81%8C%E3%81%99%E3%81%94%E3%81%84\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eこいつのおかげで今書けています。\n誰かに質問攻めにするより気が楽\u0026amp;答えをすぐ出してくれる。素晴らしい。\nワイみたいな知識がない人間こそ使ってはいけない代物だと思いますﾊｲ。\n脳が冷える感覚がする。明らか頭が悪くなったと感じております。\nやっぱ自分で考えなきゃダメだと思うの。\n努力します。\u003c/p\u003e\n\u003cp\u003eこんなもんでええですかね。\n今回はテスト兼ねてますので雑にちゃちゃっと終わらせます。\u003c/p\u003e\n\u003cp\u003e終わり。\u003c/p\u003e","title":"週報20250303","type":"weekly"},{"content":" はじめに # 大学へ行くことになったので買ったうちのThinkPadには元々RealTekのwifi 6対応のやつが載ってました。それで不便だと感じたことは全くないです。うちのルーターはwifi 5しか出せないし。 オーバースペックな気がするのに何で買ったかってのはロマンです。冗談はさておき、買う必要が出てしまったから買いました。 というわけで備忘録的な感じでつらつらと書いていきます。\nスペック # うちのはLenovoの公式からカスタムしたモデルを買いました。参考程度に下にスペックを書いときます。\nThinkPad E16 Gen 1\nプロセッサー インテル® Core™ i7-13700H OS Windows 11 Home 64bit メモリ 32 GB DDR4-3200MHz 1stストレージ 512 GB SSD 2ndストレージ 256 GB SSD ←ubuntu入れてます ディスプレイ 16\u0026quot; WUXGA液晶 (1920 x 1200) IPS, マルチタッチパネル グラフィックカード インテル® Iris® Xe 内蔵カメラ 1080p FHDカメラ、マイク 指紋センサー 指紋センサー キーボード バックライト、ブラック、数値キーパッド付 - 日本語 無線LANアダプター Wi-Fi 6対応 (IEEE 802.11ax/ac/a/b/g/n準拠) 2x2 \u0026amp; Bluetooth® (RealTek® 8852BE) 一番下以外は関係ないですね。タッチパネルにしたのを自慢したかった\n作業風景とか # こんな感じでこじ開けます。 こんな感じでこじ開けられました。 今回入れるwifiカードはこれです インテルのWi-Fi7 BE200とかいうやつらしいです\n普通に取り換えて元に戻すだけなのでさくっと作業やると なんとドライバー入れた瞬間に繋がりました。 ubuntuはドライバーを入れる必要なくそのまま繋がりました。\n少し考えれば当たり前だと分かりますが、wifiとbluetoothの設定がほぼ全て吹き飛んでいました。学内ネットに再接続するのが面倒\n私の環境にwifi7などあるはずもなく、スピードテストしようにもwifi5のルーターしかないためスピードテストは省略します。\nおわりに # 思った以上に割と簡単に接続できました。以前AX210とAX211を買い間違えて大惨事になったことがあったので覚悟していましたが、想像以上に簡単でびっくりしました。\n変えれるなら変えてもいいんじゃないでしょうか。\nこいつで色々実験しようと思います。\nおわり。\n","date":"2024/10/18 18:02","externalUrl":null,"permalink":"/posts/wifi7inthinkpad/","section":"記事一覧","summary":"\u003ch1 class=\"relative group\"\u003eはじめに \n    \u003cdiv id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e大学へ行くことになったので買ったうちのThinkPadには元々RealTekのwifi 6対応のやつが載ってました。それで不便だと感じたことは全くないです。うちのルーターはwifi 5しか出せないし。 \u003cbr\u003e\nオーバースペックな気がするのに何で買ったかってのはロマンです。冗談はさておき、買う必要が出てしまったから買いました。 \u003cbr\u003e\nというわけで備忘録的な感じでつらつらと書いていきます。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eスペック \n    \u003cdiv id=\"%E3%82%B9%E3%83%9A%E3%83%83%E3%82%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%82%B9%E3%83%9A%E3%83%83%E3%82%AF\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eうちのはLenovoの公式からカスタムしたモデルを買いました。参考程度に下にスペックを書いときます。\u003c/p\u003e\n\u003cp\u003eThinkPad E16 Gen 1\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eプロセッサー インテル® Core™ i7-13700H\u003c/li\u003e\n\u003cli\u003eOS Windows 11 Home 64bit\u003c/li\u003e\n\u003cli\u003eメモリ 32 GB DDR4-3200MHz\u003c/li\u003e\n\u003cli\u003e1stストレージ 512 GB SSD\u003c/li\u003e\n\u003cli\u003e2ndストレージ 256 GB SSD ←ubuntu入れてます\u003c/li\u003e\n\u003cli\u003eディスプレイ 16\u0026quot; WUXGA液晶 (1920 x 1200) IPS, マルチタッチパネル\u003c/li\u003e\n\u003cli\u003eグラフィックカード インテル® Iris® Xe\u003c/li\u003e\n\u003cli\u003e内蔵カメラ 1080p FHDカメラ、マイク\u003c/li\u003e\n\u003cli\u003e指紋センサー 指紋センサー\u003c/li\u003e\n\u003cli\u003eキーボード バックライト、ブラック、数値キーパッド付 - 日本語\u003c/li\u003e\n\u003cli\u003e無線LANアダプター Wi-Fi 6対応 (IEEE 802.11ax/ac/a/b/g/n準拠) 2x2 \u0026amp; Bluetooth® (RealTek® 8852BE)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一番下以外は関係ないですね。\u003cdel\u003eタッチパネルにしたのを自慢したかった\u003c/del\u003e\u003c/p\u003e","title":"ThinkPadでWifi7を使えるようにしてみた話","type":"posts"},{"content":" markdownの書き方が分からない # はい。ノリと勢いで始めてしまったせいで分からんなってます。\nというわけでmarkdownの練習がてら色々触ってみております。自己満足なそういうアレです。\n自分語りをしてみる # ノリと勢いでmisskeyのサーバーを運営しております。月のテンペストという鯖の鯖缶やってます\n中途半端な大学のちょっとしたプロジェクトに参加して毎日ﾋｰﾋｰやってます\n今回作ろうと思った理由はプロジェクトでやることがないなったからです\n遊び半分で作りました　泣きながらやったらなんかできたのでマズいことをやっている可能性が微レ存\nブログ作ったはいいものの楽に書けないと多分触らなくなるのでobsidianで書けるようにしてみました\nどないなってるかよくわからんのでこれもテストです\n改行の仕方が分からない　# なんか改行できないんですけど\nteusto tesuto←これは半角改行2つ\nteusto　tesuto←これは全角改行2つ\ntesuto \u0026lt;br\u0026gt;tesuto←これはbr\nどんだけやっても改行されないのはなんでですか\nあれですかhugoかparams.tomlになんか書いてないからですか\nmarkdownの書き方が分からなくなってきたのでこれくらいにしときます。\nおわり。\n","date":"2024/10/18 15:02","externalUrl":null,"permalink":"/posts/test2/","section":"記事一覧","summary":"\u003ch1 class=\"relative group\"\u003emarkdownの書き方が分からない \n    \u003cdiv id=\"markdown%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#markdown%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eはい。ノリと勢いで始めてしまったせいで分からんなってます。\u003c/p\u003e\n\u003cp\u003eというわけでmarkdownの練習がてら色々触ってみております。自己満足なそういうアレです。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e自分語りをしてみる \n    \u003cdiv id=\"%E8%87%AA%E5%88%86%E8%AA%9E%E3%82%8A%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%87%AA%E5%88%86%E8%AA%9E%E3%82%8A%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eノリと勢いでmisskeyのサーバーを運営しております。\u003ca href=\"mk.tenpest-moon..uk\"\u003e月のテンペスト\u003c/a\u003eという鯖の鯖缶やってます\u003c/p\u003e\n\u003cp\u003e中途半端な大学のちょっとしたプロジェクトに参加して毎日ﾋｰﾋｰやってます\u003c/p\u003e\n\u003cp\u003e今回作ろうと思った理由はプロジェクトでやることがないなったからです\u003c/p\u003e\n\u003cp\u003e遊び半分で作りました　　\u003c/p\u003e\n\u003cp\u003e泣きながらやったらなんかできたのでマズいことをやっている可能性が微レ存\u003c/p\u003e\n\u003cp\u003eブログ作ったはいいものの楽に書けないと多分触らなくなるのでobsidianで書けるようにしてみました\u003c/p\u003e\n\u003cp\u003eどないなってるかよくわからんのでこれもテストです\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e改行の仕方が分からない　 \n    \u003cdiv id=\"%E6%94%B9%E8%A1%8C%E3%81%AE%E4%BB%95%E6%96%B9%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%94%B9%E8%A1%8C%E3%81%AE%E4%BB%95%E6%96%B9%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eなんか改行できないんですけど\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eteusto  tesuto←これは半角改行2つ\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eteusto　　tesuto←これは全角改行2つ\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003etesuto \u003ccode\u003e\u0026lt;br\u0026gt;tesuto←これはbr\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eどんだけやっても改行されないのはなんでですか\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eあれですかhugoかparams.tomlになんか書いてないからですか\u003c/p\u003e\n\u003cp\u003emarkdownの書き方が分からなくなってきたのでこれくらいにしときます。\u003c/p\u003e\n\u003cp\u003eおわり。\u003c/p\u003e","title":"markdownの書き方に慣れてみる","type":"posts"},{"content":" これはテストです # はいというわけで何度目か分からない最初の記事を書いています\nこれどう表示されてるか分からんの怖すぎワロタ\nひとまず下書きのテンプレート？を作れたはずだけど正しいのかどうか分からない\n人生何も分からない\n以上。終わり。\n","date":"2024/10/18 10:02","externalUrl":null,"permalink":"/posts/test1/","section":"記事一覧","summary":"\u003ch1 class=\"relative group\"\u003eこれはテストです \n    \u003cdiv id=\"%E3%81%93%E3%82%8C%E3%81%AF%E3%83%86%E3%82%B9%E3%83%88%E3%81%A7%E3%81%99\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E3%81%93%E3%82%8C%E3%81%AF%E3%83%86%E3%82%B9%E3%83%88%E3%81%A7%E3%81%99\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eはいというわけで何度目か分からない最初の記事を書いています\u003c/p\u003e\n\u003cp\u003eこれどう表示されてるか分からんの怖すぎワロタ\u003c/p\u003e\n\u003cp\u003eひとまず下書きのテンプレート？を作れたはずだけど正しいのかどうか分からない\u003c/p\u003e\n\u003cp\u003e人生何も分からない\u003c/p\u003e\n\u003cp\u003e以上。終わり。\u003c/p\u003e","title":"Test","type":"posts"},{"content":" about # じゃがびぃと申します。\n特に目立って活動してるわけじゃないです。趣味でmisskeyという分散型snsとこのブログを運営しています。\n某大学のそこそこなプロジェクトで下っ端として生きています。主にandroid触ったりwifi触ったり色んな事をさせてもろてます。\ntwitterに居たりmisskeyに居たりbskyに居たりmixi2でコーヒー垂れ流してたり色んな所でボチボチやってます。\n連絡先 # 以下に連絡がつきやすい垢を置いときます。何かあればDMなりで接触してください。\nTwitter:@Jyaga_bee Misskey:Jyagabee@mk.tenpest-moon.uk bluesky:jyagabee.bsky.social 作ったもの(ない) # なにか作ったものがあれば適当に乗せていきたい…いつになることやら\nおわり。\n","externalUrl":null,"permalink":"/about/","section":"じゃがびぃのサイト","summary":"\u003ch1 class=\"relative group\"\u003eabout \n    \u003cdiv id=\"about\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#about\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eじゃがびぃと申します。\u003c/p\u003e\n\u003cp\u003e特に目立って活動してるわけじゃないです。趣味でmisskeyという分散型snsとこのブログを運営しています。\u003cbr\u003e\n某大学のそこそこなプロジェクトで下っ端として生きています。主にandroid触ったりwifi触ったり色んな事をさせてもろてます。\u003cbr\u003e\ntwitterに居たりmisskeyに居たりbskyに居たりmixi2でコーヒー垂れ流してたり色んな所でボチボチやってます。\u003c/p\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e連絡先 \n    \u003cdiv id=\"%E9%80%A3%E7%B5%A1%E5%85%88\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E9%80%A3%E7%B5%A1%E5%85%88\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e以下に連絡がつきやすい垢を置いときます。何かあればDMなりで接触してください。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTwitter:\u003ca href=\"https://x.com/Jyaga_bee\" target=\"_blank\"\u003e@Jyaga_bee\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMisskey:\u003ca href=\"https://mk.tenpest-moon.uk/@Jyagabee\" target=\"_blank\"\u003eJyagabee@mk.tenpest-moon.uk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ebluesky:\u003ca href=\"https://bsky.app/profile/jyagabee.bsky.social\" target=\"_blank\"\u003ejyagabee.bsky.social\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch1 class=\"relative group\"\u003e作ったもの(ない) \n    \u003cdiv id=\"%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE%E3%81%AA%E3%81%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE%E3%81%AA%E3%81%84\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eなにか作ったものがあれば適当に乗せていきたい…いつになることやら\u003c/p\u003e\n\u003cp\u003eおわり。\u003c/p\u003e","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/tags/1%E7%AB%A0/","section":"Tags","summary":"","title":"1章","type":"tags"},{"content":" 1.1 DDSとは何か # データ配信サービス（DDS）は、分散ソフトウェアアプリケーション通信に使用されるデータ中心の通信プロトコル。データプロバイダーとデータ消費者間の通信を可能にする通信アプリケーションプログラミングインターフェース（API）と通信セマンティクスを記述する。\nデータ中心型パブリッシュ・サブスクライブ（DCPS）モデルであるため、その実装では3つの主要なアプリケーションエンティティが定義されている\n情報生成オブジェクトとその特性を定義するパブリケーションエンティティ 情報消費オブジェクトとその特性を定義するサブスクリプションエンティティ トピックとして送信される情報の種類を定義し、パブリッシャーとサブスクライバーをそのサービス品質（QoS）特性とともに作成し、上記エンティティの正しい動作を保証する構成エンティティ DDSはQoSを使用しDDSエンティティの動作特性を定義している。QoSは個々のQoSポリシー（QoSPolicyから派生した型のオブジェクト）で構成されている。これらは、Policyで説明されている。\n1.1.1 DCPSの概念モデル # DCPSモデルでは、通信アプリケーションシステムの開発のために4つの基本要素が定義されている。 1. パブリッシャー: 実装するDataWriterの作成と構成を担当するDCPSエンティティ。 DataWriterは実際のメッセージ公開を担当する。 各DataWriterには、メッセージが公開されるトピックが割り当てられる。 2. サブスクライバー: サブスクライバーしているトピックの下で公開されたデータを受信する責任を持つDCPSエンティティ。 新しいデータの可用性をアプリケーションに通知する責任を持つDataReaderオブジェクトを1つ以上提供する。 3. トピック: パブリッシャーとサブスクライバーを結びつけるエンティティ。 DDSドメイン内で一意。 TopicDescriptionを通じて、パブリッシャーとサブスクライバーのデータ型の統一性を可能にします。 4. ドメイン: 異なるトピックの下でデータを交換する、1つ以上のアプリケーションに属するすべてのパブリッシャーとサブスクライバーをリンクするために使用される概念。 ドメインに参加する個々のアケーションは、DomainParticipantと呼ばれる。 DDSドメインはドメインIDによって識別される。 DomainParticipantはドメインIDを定義して、所属するDDSドメインを指定する。 異なるIDを持つ2つのDomainParticipantは、ネットワーク上でお互いの存在を認識しない。したがって、複数の通信チャネルを作成できる。 これは、それぞれのDomainParticipantが互いに通信する複数のDDSアプリケーションを使用しているが、これらのアプリケーションが干渉してはならない際に適用される。 DomainParticipantは他のDCPSエンティティのコンテナとして機能し、パブリッシャー、サブスクライバー、およびトピックエンティティのファクトリとして機能し、ドメイン内で管理サービスを提供する。\nこれらの要素は以下の図に示される。 1.2 RTPSとは何か # リアルタイムパブリッシュサブスクライブ（RTPS）プロトコルは、DDSアプリケーションをサポートするために開発され、UDPのようなベストエフォート型トランスポート上のパブ-サブ通信ミドルウェアである。\nさらに、Fast DDSはTCPと共有メモリ（SHM）トランスポートのサポートを提供している。\nユニキャストとマルチキャストの両方の通信をサポートするように設計されている。\nRTPSの最上位には、DDSから継承された別の通信プレーンを定義するドメインがある。\n複数のドメインが同時に独立して共存できる。\nドメインには任意の数のRTPSParticipantが含まれ、これはデータの送受信が可能な要素である。\nこれを行うために、RTPSParticipantはそのエンドポイントを使用する：\nRTPSWriter：データを送信できるエンドポイント。 RTPSReader：データを受信できるエンドポイント。 RTPSParticipantは任意の数のライターおよびリーダーエンドポイントを持つことができる。 通信はトピックを中心に展開され、トピックは交換されるデータを定義及びラベル付けする。\nトピックは特定の参加者(a specific participant)に属するものではない。参加者は、RTPSWriterを通じてトピックの下で公開されるデータに変更を加え、RTPSReaderを通じてサブスクリプションしているトピックに関連するデータを受信する。\n通信単位はChangeと呼ばれ、トピックの下で書き込まれるデータの更新を表す。 RTPSReaders/RTPSWritersはこれらの変更をHistoryへ登録する。Historyは最近の変更をキャッシュとして機能するデータ構造である。\neProsima FastDDS のデフォルト設定では、RTPSWriterエンドポイントを通じて変更を公開すると、背後で以下の手順が発生する:\n変更がRTPSWriterの履歴キャッシュへ追加 RTPSWriterは、知っているすべてのRTPSReaderへ変更を送信する データを受信した後、RTPSReaderは新しい変更で履歴キャッシュを更新する ただし、FastDDSは、RTPSWriters/RTPSReadersの動作を変更できる多数の設定をサポートしている。\nRTPSエンティティのデフォルト設定の変更は、RTPSWriterとRTPSReader間のデータ交換フローの変更を意味する。さらに、サービス品質(QoS)ポリシーを選択することで、これらの履歴キャッシュの管理方法に様々な影響を与えることができるが、通信ループは同じままである。FastDDSにおけるRTPSプロトコルの実装について知りたい場合は、次のセクションを読んでほしい。\n","externalUrl":null,"permalink":"/fastdds_manual/whatisdds_rtps/","section":"記事一覧","summary":"\u003ch2 class=\"relative group\"\u003e1.1 DDSとは何か \n    \u003cdiv id=\"11-dds%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#11-dds%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eデータ配信サービス（DDS）は、分散ソフトウェアアプリケーション通信に使用されるデータ中心の通信プロトコル。データプロバイダーとデータ消費者間の通信を可能にする通信アプリケーションプログラミングインターフェース（API）と通信セマンティクスを記述する。\u003c/p\u003e\n\u003cp\u003eデータ中心型パブリッシュ・サブスクライブ（DCPS）モデルであるため、その実装では3つの主要なアプリケーションエンティティが定義されている\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e情報生成オブジェクトとその特性を定義するパブリケーションエンティティ\u003c/li\u003e\n\u003cli\u003e情報消費オブジェクトとその特性を定義するサブスクリプションエンティティ\u003c/li\u003e\n\u003cli\u003eトピックとして送信される情報の種類を定義し、パブリッシャーとサブスクライバーをそのサービス品質（QoS）特性とともに作成し、上記エンティティの正しい動作を保証する構成エンティティ\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDDSはQoSを使用しDDSエンティティの動作特性を定義している。QoSは個々のQoSポリシー（QoSPolicyから派生した型のオブジェクト）で構成されている。これらは、\u003ca href=\"https://fast-dds.docs.eprosima.com/en/latest/fastdds/dds_layer/core/policy/policy.html#dds-layer-core-policy\" target=\"_blank\"\u003ePolicy\u003c/a\u003eで説明されている。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e1.1.1 DCPSの概念モデル \n    \u003cdiv id=\"111-dcps%E3%81%AE%E6%A6%82%E5%BF%B5%E3%83%A2%E3%83%87%E3%83%AB\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#111-dcps%E3%81%AE%E6%A6%82%E5%BF%B5%E3%83%A2%E3%83%87%E3%83%AB\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eDCPSモデルでは、通信アプリケーションシステムの開発のために4つの基本要素が定義されている。\n1. パブリッシャー:\n実装するDataWriterの作成と構成を担当するDCPSエンティティ。\nDataWriterは実際のメッセージ公開を担当する。\n各DataWriterには、メッセージが公開されるトピックが割り当てられる。\n2. サブスクライバー:\nサブスクライバーしているトピックの下で公開されたデータを受信する責任を持つDCPSエンティティ。\n新しいデータの可用性をアプリケーションに通知する責任を持つDataReaderオブジェクトを1つ以上提供する。\n3. トピック:\nパブリッシャーとサブスクライバーを結びつけるエンティティ。\nDDSドメイン内で一意。\nTopicDescriptionを通じて、パブリッシャーとサブスクライバーのデータ型の統一性を可能にします。\n4. ドメイン:\n異なるトピックの下でデータを交換する、1つ以上のアプリケーションに属するすべてのパブリッシャーとサブスクライバーをリンクするために使用される概念。\nドメインに参加する個々のアケーションは、DomainParticipantと呼ばれる。\nDDSドメインはドメインIDによって識別される。\nDomainParticipantはドメインIDを定義して、所属するDDSドメインを指定する。\n異なるIDを持つ2つのDomainParticipantは、ネットワーク上でお互いの存在を認識しない。したがって、複数の通信チャネルを作成できる。\nこれは、それぞれのDomainParticipantが互いに通信する複数のDDSアプリケーションを使用しているが、これらのアプリケーションが干渉してはならない際に適用される。\nDomainParticipantは他のDCPSエンティティのコンテナとして機能し、パブリッシャー、サブスクライバー、およびトピックエンティティのファクトリとして機能し、ドメイン内で管理サービスを提供する。\u003c/p\u003e\n\u003cp\u003eこれらの要素は以下の図に示される。\n\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        src=\"/fastdds_manual/whatisdds_rtps/dds_domain_ja.svg\"\n        alt=\"DDSドメイン内のDCPSモデルエンティティ\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e1.2 RTPSとは何か \n    \u003cdiv id=\"12-rtps%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#12-rtps%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eリアルタイムパブリッシュサブスクライブ（RTPS）プロトコルは、DDSアプリケーションをサポートするために開発され、UDPのようなベストエフォート型トランスポート上のパブ-サブ通信ミドルウェアである。\u003cbr\u003e\nさらに、Fast DDSはTCPと共有メモリ（SHM）トランスポートのサポートを提供している。\u003c/p\u003e","title":"1章 DDSとは何か、RTPSとは何か","type":"fastdds_manual"},{"content":" 1.3 シンプルなC++パブリッシャーとサブスクライバーアプリケーションの作成 # このセクションでは、C++APIを使用してシンプルなFastDDSアプリケーションをパブリッシャーとサブスクライバーで作成する方法を段階的に説明する。また、eProsima Fast DDS-Genツールを用いて、このセクションで実装されているものと同様の例を自動生成することも可能である。 この追加のアプローチは、「パブリッシュ/サブスクライバーアプリケーションの構築」で説明されている。\n1.3.1 背景 # DDSは、DCPSモデルを実装するデータ中心の通信ミドルウェアである。このモデルは、データを生成する要素であるパブリッシャーと、データを消費するサブスクライバーの開発に基づいている。 これらのエンティティは、トピックを介して通信する。トピックは両方のDDSエンティティを結びつける要素である。パブリッシャーはトピックの下で情報を生成し、サブスクライバーは同じトピックをサブスクライブして情報を受け取る。\n1.3.2 前提条件 # まず、eProsima FastDDSとそのすべての依存関係をインストールするために、インストールマニュアルに記載されている手順に従う必要がある。また、eProsima FastDDS-Genツールのインストールについても、インストールマニュアルに記載されている手順を完了している必要がある。 このチュートリアルで提供されている全てのコマンドは、Linux環境用に記述されている。\n1.3.3 アプリケーションワークスペースの作成 # プロジェクトの最後には、アプリケーションワークスペースは以下の構造を持つことになる。 build/DDSHelloWorldPublisher と build/DDSHelloWorldSubscriberは、それぞれパブリッシャーとサブスクライバーアプリケーションである。\n.\r└── workspace_DDSHelloWorld\r├── build\r│ ├── CMakeCache.txt\r│ ├── CMakeFiles\r│ ├── cmake_install.cmake\r│ ├── DDSHelloWorldPublisher\r│ ├── DDSHelloWorldSubscriber\r│ └── Makefile\r├── CMakeLists.txt\r└── src\r├── HelloWorld.hpp\r├── HelloWorld.idl\r├── HelloWorldCdrAux.hpp\r├── HelloWorldCdrAux.ipp\r├── HelloWorldPublisher.cpp\r├── HelloWorldPubSubTypes.cxx\r├── HelloWorldPubSubTypes.h\r├── HelloWorldSubscriber.cpp\r├── HelloWorldTypeObjectSupport.cxx\r└── HelloWorldTypeObjectSupport.hpp まず、ディレクトリツリーを作成する。\nmkdir workspace_DDSHelloWorld \u0026amp;\u0026amp; cd workspace_DDSHelloWorld\rmkdir src build 1.3.4 リンクされたライブラリとその依存関係のインポート # DDSアプリケーションにはFastDDSとFastCDRライブラリが必要となる。 インストール手順によって、これらのライブラリをDDSアプリケーションで利用可能にするプロセスが若干異なる。\n1.3.4.1 バイナリからのインストールと手動インストール # バイナリからのインストールまたは手動インストールを行った場合、これらのライブラリはすでにワークスペースからアクセス可能である。 Linuxでは、ヘッダーファイルはFastDDSとFastCDRについてそれぞれ /usr/include/fastdds/と /usr/include/fastcdr/ディレクトリにある。 両方のコンパイル済みライブラリは /usr/lib/ディレクトリにある。\n1.3.4.2 Colconインストール # Colconインストールからライブラリをインポートする方法はいくつかある。 ライブラリを現在のセッションでのみ利用可能にする必要がある場合は、次のコマンドを実行する。\nsource \u0026lt;path/to/Fast-DDS/workspace\u0026gt;/install/setup.bash シェル設定ファイルにFastDDSインストールディレクトリを$PATH変数に追加することで、任意のセッションからアクセス可能にすることができる。現在のユーザーに対して以下のコマンドを実行する。\necho \u0026#39;source \u0026lt;path/to/Fast-DDS/workspace\u0026gt;/install/setup.bash\u0026#39; \u0026gt;\u0026gt; ~/.bashrc これにより、このユーザーのログイン後毎回環境が設定される。\n1.3.5 Cmakeプロジェクトの設定 # プロジェクトのビルドを管理するためにCmakeツールを使用する。お好みのテキストエディタで、CMakeLists.txtという新しいファイルを作成し、以下のコードスニペットをコピーアンドペーストする。 このファイルをワークスペースのルートディレクトリに保存する。 これらの手順に従った場合、workspace_DDSHelloWorldになるはずである。\ncmake_minimum_required(VERSION 3.20)\rproject(DDSHelloWorld)\r# Find requirements\rif(NOT fastcdr_FOUND)\rfind_package(fastcdr 2 REQUIRED)\rendif()\rif(NOT fastdds_FOUND)\rfind_package(fastdds 3 REQUIRED)\rendif()\r# Set C++11\rinclude(CheckCXXCompilerFlag)\rif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG OR\rCMAKE_CXX_COMPILER_ID MATCHES \u0026#34;Clang\u0026#34;)\rcheck_cxx_compiler_flag(-std=c++11 SUPPORTS_CXX11)\rif(SUPPORTS_CXX11)\radd_compile_options(-std=c++11)\relse()\rmessage(FATAL_ERROR \u0026#34;Compiler doesn\u0026#39;t support C++11\u0026#34;)\rendif()\rendif()\rmessage(STATUS \u0026#34;Configuring HelloWorld publisher/subscriber example...\u0026#34;)\rfile(GLOB DDS_HELLOWORLD_SOURCES_CXX \u0026#34;src/*.cxx\u0026#34;) 各セクションで、特定の生成されたファイルを含めるためにこのファイルを完成させていく。\n1.3.6 トピックデータ型の構築 # eProsima Fast DDS-Genは、Javaアプリケーションで、インターフェース記述言語(IDL)ファイルで定義されたデータ型を使用してソースコードを生成する。このアプリケーションは2つの異なることを行うことができる:\nカスタムトピックのC++定義を生成 トピックデータを使用する機能的な例を生成 このチュートリアルでは前者を使用する。 このプロジェクトでは、Fast DDS-Genアプリケーションを使用して、パブリッシャーが送信し、サブスクライバーが受信するメッセージのデータ型を定義する。\nワークスペースディレクトリで、以下のコマンドを実行する。\ncd src \u0026amp;\u0026amp; touch HelloWorld.idl これにより、srcディレクトリに HelloWorld.idlファイルが生成される。テキストエディタでファイルを開き、以下のコードスニペットをコピーアンドペーストする。\nstruct HelloWorld\r{\runsigned long index;\rstring message;\r}; これにより、HelloWorldデータ型が定義された。これには2つの要素がある。\nunit32_t型のindex std:string型のmessage 後は、このデータ型をc++11で実装するソースコードを生成するだけである。 srcディレクトリから以下のコマンドを実行する。 \u0026lt;path/to/Fast DDS-Gen\u0026gt;/scripts/fastddsgen HelloWorld.idl これにより、以下のファイルが生成されているはずである:\nHelloWorld.hpp:HelloWorld型の定義 HelloWorldPubSubTypes.cxx:HelloWorldPubSubTypes.cxxのヘッダーファイル HelloWorldCdrAux.ipp:HelloWorld型のシリアライゼーションおよびデシリアライゼーションコード HelloWorldCdrAux.hpp:HelloWorldCdrAux.ippのヘッダーファイル HelloWorldTypesObjectSupport.cxx:TypeObject表現登録コード HelloWorldTypeObjectSupport.hpp:HelloWorldTypeObjectSupport.cxxのヘッダーファイル 1.3.7 FastDDSパブリッシャーの作成 # ワークスペースのsrcディレクトリから、以下のコマンドを実行してHelloWorldPublisher.cppファイルをダウンロードする。\nwget -O HelloWorldPublisher.cpp \\\rhttps://raw.githubusercontent.com/eProsima/Fast-RTPS-docs/master/code/Examples/C++/DDSHelloWorld/src/HelloWorldPublisher.cpp これはパブリッシャーアプリケーションのc++ソースコードである。HelloWorldTopicトピックで10件のパブリケーションを送信する。\n// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).\r//\r// Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\r// you may not use this file except in compliance with the License.\r// You may obtain a copy of the License at\r//\r// http://www.apache.org/licenses/LICENSE-2.0\r//\r// Unless required by applicable law or agreed to in writing, software\r// distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\r// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r// See the License for the specific language governing permissions and\r// limitations under the License.\r/**\r* @file HelloWorldPublisher.cpp\r*\r*/\r#include \u0026#34;HelloWorldPubSubTypes.hpp\u0026#34;\r#include \u0026lt;chrono\u0026gt;\r#include \u0026lt;thread\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipant.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipantFactory.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/publisher/DataWriter.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/publisher/DataWriterListener.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/publisher/Publisher.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/topic/TypeSupport.hpp\u0026gt;\rusing namespace eprosima::fastdds::dds;\rclass HelloWorldPublisher\r{\rprivate:\rHelloWorld hello_;\rDomainParticipant* participant_;\rPublisher* publisher_;\rTopic* topic_;\rDataWriter* writer_;\rTypeSupport type_;\rclass PubListener : public DataWriterListener\r{\rpublic:\rPubListener()\r: matched_(0)\r{\r}\r~PubListener() override\r{\r}\rvoid on_publication_matched(\rDataWriter*,\rconst PublicationMatchedStatus\u0026amp; info) override\r{\rif (info.current_count_change == 1)\r{\rmatched_ = info.total_count;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Publisher matched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse if (info.current_count_change == -1)\r{\rmatched_ = info.total_count;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Publisher unmatched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse\r{\rstd::cout \u0026lt;\u0026lt; info.current_count_change\r\u0026lt;\u0026lt; \u0026#34; is not a valid value for PublicationMatchedStatus current count change.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\r}\rstd::atomic_int matched_;\r} listener_;\rpublic:\rHelloWorldPublisher()\r: participant_(nullptr)\r, publisher_(nullptr)\r, topic_(nullptr)\r, writer_(nullptr)\r, type_(new HelloWorldPubSubType())\r{\r}\rvirtual ~HelloWorldPublisher()\r{\rif (writer_ != nullptr)\r{\rpublisher_-\u0026gt;delete_datawriter(writer_);\r}\rif (publisher_ != nullptr)\r{\rparticipant_-\u0026gt;delete_publisher(publisher_);\r}\rif (topic_ != nullptr)\r{\rparticipant_-\u0026gt;delete_topic(topic_);\r}\rDomainParticipantFactory::get_instance()-\u0026gt;delete_participant(participant_);\r}\r//!Initialize the publisher\rbool init()\r{\rhello_.index(0);\rhello_.message(\u0026#34;HelloWorld\u0026#34;);\rDomainParticipantQos participantQos;\rparticipantQos.name(\u0026#34;Participant_publisher\u0026#34;);\rparticipant_ = DomainParticipantFactory::get_instance()-\u0026gt;create_participant(0, participantQos);\rif (participant_ == nullptr)\r{\rreturn false;\r}\r// Register the Type\rtype_.register_type(participant_);\r// Create the publications Topic\rtopic_ = participant_-\u0026gt;create_topic(\u0026#34;HelloWorldTopic\u0026#34;, \u0026#34;HelloWorld\u0026#34;, TOPIC_QOS_DEFAULT);\rif (topic_ == nullptr)\r{\rreturn false;\r}\r// Create the Publisher\rpublisher_ = participant_-\u0026gt;create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);\rif (publisher_ == nullptr)\r{\rreturn false;\r}\r// Create the DataWriter\rwriter_ = publisher_-\u0026gt;create_datawriter(topic_, DATAWRITER_QOS_DEFAULT, \u0026amp;listener_);\rif (writer_ == nullptr)\r{\rreturn false;\r}\rreturn true;\r}\r//!Send a publication\rbool publish()\r{\rif (listener_.matched_ \u0026gt; 0)\r{\rhello_.index(hello_.index() + 1);\rwriter_-\u0026gt;write(\u0026amp;hello_);\rreturn true;\r}\rreturn false;\r}\r//!Run the Publisher\rvoid run(\ruint32_t samples)\r{\ruint32_t samples_sent = 0;\rwhile (samples_sent \u0026lt; samples)\r{\rif (publish())\r{\rsamples_sent++;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Message: \u0026#34; \u0026lt;\u0026lt; hello_.message() \u0026lt;\u0026lt; \u0026#34; with index: \u0026#34; \u0026lt;\u0026lt; hello_.index()\r\u0026lt;\u0026lt; \u0026#34; SENT\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\rstd::this_thread::sleep_for(std::chrono::milliseconds(1000));\r}\r}\r};\rint main(\rint argc,\rchar** argv)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Starting publisher.\u0026#34; \u0026lt;\u0026lt; std::endl;\ruint32_t samples = 10;\rHelloWorldPublisher* mypub = new HelloWorldPublisher();\rif(mypub-\u0026gt;init())\r{\rmypub-\u0026gt;run(samples);\r}\rdelete mypub;\rreturn 0;\r} 1.3.7.1 ソースコードの検証 # ファイルの先頭には、Doxygen形式のコメントブロックがあり、@fileフィールドがファイル名を記述している。\n/**\r* @file HelloWorldPublisher.cpp\r*\r*/ 以下にc++ヘッダーのインクルードを示す。最初のものは、前のセクションで定義したデータ型のシリアライゼーションおよびデシリアライゼーション関数を含むHelloWorldPubSubTypes.hファイルをインクルードしている。\n#include \u0026#34;HelloWorldPubSubTypes.hpp\u0026#34; 次のブロックは、Fast DDS APIの使用を可能にするC++ヘッダーファイルをインクルードしている。\nDomainParticipantFactory: DomainParticipantオブジェクトの作成と破棄を可能にする。 DomainParticipant: 他のすべてのEntityオブジェクトのコンテナとして機能し、Publisher、Subscriber、およびTopicオブジェクトのファクトリとして機能する。 TypeSupport: 参加者に特定のデータ型のシリアライゼーション、デシリアライゼーション、およびキーを取得する関数を提供する。 Publisher: DataWriterの作成を担当するオブジェクト。 DataWriter: アプリケーションが特定のトピックの下で公開されるデータの値を設定することを可能にする。 DataWriterListener: DataWriterListenerの関数の再定義を可能にする。 #include \u0026lt;chrono\u0026gt;\r#include \u0026lt;thread\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipant.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipantFactory.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/publisher/DataWriter.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/publisher/DataWriterListener.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/publisher/Publisher.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/topic/TypeSupport.hpp\u0026gt; 次に、アプリケーションで使用するeProsima FastDDSのクラスと関数を含む名前空間を定義する。\nusing namespace eprosima::fastdds::dds; 次の行は、パブリッシャーを実装するHelloWorldPublisherクラスを作成する。\nclass HelloWorldPublisher クラスのプライベートデータメンバーに続いて、hello_データメンバーはIDLファイルで作成したデータ型を定義するHelloWorldクラスのオブジェクトとして定義される。 次に参加者、パブリッシャー、トピック、DataWriter、およびデータ型をDomainParticipantに登録されるオブジェクトである。 TypeSupportクラスのtype_オブジェクトは、DomainParticipantにトピックデータ型を登録するために使用されるオブジェクトである。\nprivate:\rHelloWorld hello_;\rDomainParticipant* participant_;\rPublisher* publisher_;\rTopic* topic_;\rDataWriter* writer_;\rTypeSupport type_; 次に、DataWriterListenerクラスを継承してPubListenerクラスが定義する。 このクラスはデフォルトのDataWriterリスナーコールバックをオーバーライドし、イベントが発生した場合にルーチンを実行することを可能にする。 オーバーライドされたコールバック on_publication?mached()により、DataWriterが発行しているトピックをリッスン(?)している新しいDataReaderが検出されたときの一連のアクションを定義することができる。 info.current_count_changeは、DataWriterにマッチしたDataReaderの変更を検出する。これは、MachedStatus構造体のメンバで、サブスクリプションのステータス変更を追跡できる。 最後に、このクラスのlistener_オブジェクトはPubListenerのインスタンスとして定義される。\nclass PubListener : public DataWriterListener\r{\rpublic:\rPubListener()\r: matched_(0)\r{\r}\r~PubListener() override\r{\r}\rvoid on_publication_matched(\rDataWriter*,\rconst PublicationMatchedStatus\u0026amp; info) override\r{\rif (info.current_count_change == 1)\r{\rmatched_ = info.total_count;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Publisher matched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse if (info.current_count_change == -1)\r{\rmatched_ = info.total_count;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Publisher unmatched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse\r{\rstd::cout \u0026lt;\u0026lt; info.current_count_change\r\u0026lt;\u0026lt; \u0026#34; is not a valid value for PublicationMatchedStatus current count change.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\r}\rstd::atomic_int matched_;\r} listener_; HelloWorldPublisherクラスのpublucコンストラクタとデストラクタを以下に定義する。コンストラクタは、クラスのプライベート・データ・メンバをnullptrに初期化する。 ただし、TypeSupportオブジェクトはHelloWorldPubSubTypeクラスのインスタンスとして初期化される。クラスのデストラクタはこれらのデータ・メンバを削除し、システムメモリを削除する。\nHelloWorldPublisher()\r: participant_(nullptr)\r, publisher_(nullptr)\r, topic_(nullptr)\r, writer_(nullptr)\r, type_(new HelloWorldPubSubType())\r{\r}\rvirtual ~HelloWorldPublisher()\r{\rif (writer_ != nullptr)\r{\rpublisher_-\u0026gt;delete_datawriter(writer_);\r}\rif (publisher_ != nullptr)\r{\rparticipant_-\u0026gt;delete_publisher(publisher_);\r}\rif (topic_ != nullptr)\r{\rparticipant_-\u0026gt;delete_topic(topic_);\r}\rDomainParticipantFactory::get_instance()-\u0026gt;delete_participant(participant_);\r} HelloWorldPublisherクラスのパブリックメンバ関数を続行すると、次のコードスニペットはパブリックパブリッシャーの初期化メンバー関数を定義する。この関数は、いくつかのアクションを実行する。\nHelloWorld型のhello_構造体メンバの内容を初期化する。 DomainParticipantのQoSを通じて参加者に名前を割り当てる。 DomainParticipantFactoryを使用して参加者を作成する。 IDLで定義されたデータ型を登録する。 パブリケーションのトピックを作成する。 パブリッシャーを作成する。 先に作成したリスナーでDataWriterを作成する。 以上のように、参加者を除くすべてのエンティティのQoS構成は、デフォルト構成(PARTICIPANT_QOS_DEFAULT、PUBLISHER_QOS_DEFAULT、TOPIC_QOS_DEFAULT、DATAWRITER_QOS_DEFAULT)である。 各DDSエンティティのデフォルト値は、DDSスタンダードで確認できる。\n//!Initialize the publisher\rbool init()\r{\rhello_.index(0);\rhello_.message(\u0026#34;HelloWorld\u0026#34;);\rDomainParticipantQos participantQos;\rparticipantQos.name(\u0026#34;Participant_publisher\u0026#34;);\rparticipant_ = DomainParticipantFactory::get_instance()-\u0026gt;create_participant(0, participantQos);\rif (participant_ == nullptr)\r{\rreturn false;\r}\r// Register the Type\rtype_.register_type(participant_);\r// Create the publications Topic\rtopic_ = participant_-\u0026gt;create_topic(\u0026#34;HelloWorldTopic\u0026#34;, \u0026#34;HelloWorld\u0026#34;, TOPIC_QOS_DEFAULT);\rif (topic_ == nullptr)\r{\rreturn false;\r}\r// Create the Publisher\rpublisher_ = participant_-\u0026gt;create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);\rif (publisher_ == nullptr)\r{\rreturn false;\r}\r// Create the DataWriter\rwriter_ = publisher_-\u0026gt;create_datawriter(topic_, DATAWRITER_QOS_DEFAULT, \u0026amp;listener_);\rif (writer_ == nullptr)\r{\rreturn false;\r}\rreturn true;\r} パブリッシュを行うために、パブリック・メンバ関数 publish()が実装されている。 DataWriterのリスナー・コールバックでは、DataWriterが発行トピックを受け取っているDataReaderと合致したことを示すために、データ・メンバmached_が更新される。 このデータ・メンバには、検出されたDataReaderの数が格納される。したがって、最初のDataReaderが検出されると、アプリケーションはパブリッシュを開始する。これは単にDataReaderオブジェクトによる変更の書き込みである。\n//!Send a publication\rbool publish()\r{\rif (listener_.matched_ \u0026gt; 0)\r{\rhello_.index(hello_.index() + 1);\rwriter_-\u0026gt;write(\u0026amp;hello_);\rreturn true;\r}\rreturn false;\r} public run関数は、指定された回数のパブリッシュを実行し、パブリッシュの間に1秒間待機する。\n//!Run the Publisher\rvoid run(\ruint32_t samples)\r{\ruint32_t samples_sent = 0;\rwhile (samples_sent \u0026lt; samples)\r{\rif (publish())\r{\rsamples_sent++;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Message: \u0026#34; \u0026lt;\u0026lt; hello_.message() \u0026lt;\u0026lt; \u0026#34; with index: \u0026#34; \u0026lt;\u0026lt; hello_.index()\r\u0026lt;\u0026lt; \u0026#34; SENT\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\rstd::this_thread::sleep_for(std::chrono::milliseconds(1000));\r}\r} 最後に、HelloWorldPublisherが初期化され、mainで実行される。\nint main(\rint argc,\rchar** argv)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Starting publisher.\u0026#34; \u0026lt;\u0026lt; std::endl;\ruint32_t samples = 10;\rHelloWorldPublisher* mypub = new HelloWorldPublisher();\rif(mypub-\u0026gt;init())\r{\rmypub-\u0026gt;run(samples);\r}\rdelete mypub;\rreturn 0;\r} CMakeLists.txt # 先ほど作成したCMakeLists.txtファイルの最後に、以下のコードスニペットをインクルードする。これにより、実行ファイルのビルドに必要なすべてのソースファイルが追加され、実行ファイルとライブラリがリンクされる。\nadd_executable(DDSHelloWorldPublisher src/HelloWorldPublisher.cpp ${DDS_HELLOWORLD_SOURCES_CXX})\rtarget_link_libraries(DDSHelloWorldPublisher fastdds fastcdr) この時点で、プロジェクトはパブリッシャーアプリケーションのビルド、コンパイル、実行の準備が整った。 ワークスペースのビルドディレクトリから以下のコマンドを実行する。\ncmake ..\rcmake --build .\r./DDSHelloWorldPublisher 1.3.8 FastDDSサブスクライバーの作成 # ワークスペースのsrcディレクトリから次のコマンドを実行して、HelloWorldSubsriber.cppファイルをダウンロードする。\n// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).\r//\r// Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;);\r// you may not use this file except in compliance with the License.\r// You may obtain a copy of the License at\r//\r// http://www.apache.org/licenses/LICENSE-2.0\r//\r// Unless required by applicable law or agreed to in writing, software\r// distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS,\r// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r// See the License for the specific language governing permissions and\r// limitations under the License.\r/**\r* @file HelloWorldSubscriber.cpp\r*\r*/\r#include \u0026#34;HelloWorldPubSubTypes.hpp\u0026#34;\r#include \u0026lt;chrono\u0026gt;\r#include \u0026lt;thread\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipant.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipantFactory.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/DataReader.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/DataReaderListener.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/qos/DataReaderQos.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/SampleInfo.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/Subscriber.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/topic/TypeSupport.hpp\u0026gt;\rusing namespace eprosima::fastdds::dds;\rclass HelloWorldSubscriber\r{\rprivate:\rDomainParticipant* participant_;\rSubscriber* subscriber_;\rDataReader* reader_;\rTopic* topic_;\rTypeSupport type_;\rclass SubListener : public DataReaderListener\r{\rpublic:\rSubListener()\r: samples_(0)\r{\r}\r~SubListener() override\r{\r}\rvoid on_subscription_matched(\rDataReader*,\rconst SubscriptionMatchedStatus\u0026amp; info) override\r{\rif (info.current_count_change == 1)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Subscriber matched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse if (info.current_count_change == -1)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Subscriber unmatched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse\r{\rstd::cout \u0026lt;\u0026lt; info.current_count_change\r\u0026lt;\u0026lt; \u0026#34; is not a valid value for SubscriptionMatchedStatus current count change\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\r}\rvoid on_data_available(\rDataReader* reader) override\r{\rSampleInfo info;\rif (reader-\u0026gt;take_next_sample(\u0026amp;hello_, \u0026amp;info) == eprosima::fastdds::dds::RETCODE_OK)\r{\rif (info.valid_data)\r{\rsamples_++;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Message: \u0026#34; \u0026lt;\u0026lt; hello_.message() \u0026lt;\u0026lt; \u0026#34; with index: \u0026#34; \u0026lt;\u0026lt; hello_.index()\r\u0026lt;\u0026lt; \u0026#34; RECEIVED.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\r}\r}\rHelloWorld hello_;\rstd::atomic_int samples_;\r}\rlistener_;\rpublic:\rHelloWorldSubscriber()\r: participant_(nullptr)\r, subscriber_(nullptr)\r, topic_(nullptr)\r, reader_(nullptr)\r, type_(new HelloWorldPubSubType())\r{\r}\rvirtual ~HelloWorldSubscriber()\r{\rif (reader_ != nullptr)\r{\rsubscriber_-\u0026gt;delete_datareader(reader_);\r}\rif (topic_ != nullptr)\r{\rparticipant_-\u0026gt;delete_topic(topic_);\r}\rif (subscriber_ != nullptr)\r{\rparticipant_-\u0026gt;delete_subscriber(subscriber_);\r}\rDomainParticipantFactory::get_instance()-\u0026gt;delete_participant(participant_);\r}\r//!Initialize the subscriber\rbool init()\r{\rDomainParticipantQos participantQos;\rparticipantQos.name(\u0026#34;Participant_subscriber\u0026#34;);\rparticipant_ = DomainParticipantFactory::get_instance()-\u0026gt;create_participant(0, participantQos);\rif (participant_ == nullptr)\r{\rreturn false;\r}\r// Register the Type\rtype_.register_type(participant_);\r// Create the subscriptions Topic\rtopic_ = participant_-\u0026gt;create_topic(\u0026#34;HelloWorldTopic\u0026#34;, \u0026#34;HelloWorld\u0026#34;, TOPIC_QOS_DEFAULT);\rif (topic_ == nullptr)\r{\rreturn false;\r}\r// Create the Subscriber\rsubscriber_ = participant_-\u0026gt;create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);\rif (subscriber_ == nullptr)\r{\rreturn false;\r}\r// Create the DataReader\rreader_ = subscriber_-\u0026gt;create_datareader(topic_, DATAREADER_QOS_DEFAULT, \u0026amp;listener_);\rif (reader_ == nullptr)\r{\rreturn false;\r}\rreturn true;\r}\r//!Run the Subscriber\rvoid run(\ruint32_t samples)\r{\rwhile (listener_.samples_ \u0026lt; samples)\r{\rstd::this_thread::sleep_for(std::chrono::milliseconds(100));\r}\r}\r};\rint main(\rint argc,\rchar** argv)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Starting subscriber.\u0026#34; \u0026lt;\u0026lt; std::endl;\ruint32_t samples = 10;\rHelloWorldSubscriber* mysub = new HelloWorldSubscriber();\rif (mysub-\u0026gt;init())\r{\rmysub-\u0026gt;run(samples);\r}\rdelete mysub;\rreturn 0;\r} 1.3.8.1 コードの検証 # パブリッシャーとサブスクライバーのアプリケーションのソースコードは、ほとんど同じであるため、このドキュメントでは、既に説明されている部分を省き、両社の主な違いに焦点を当て解説する。パブリッシャーの説明と同じ構造に従い、最初のステップはC++ヘッダーファイルのインクルードである。この中で、パブリッシャークラスをインクルードしているファイルはサブスクライバークラスに、DataWriterクラスはDataReaderくらすに置き換わっている。\nSubscriber.DataReaderの作成と設定を担当するオブジェクト。 DataReader.データの実際の受信を担当するオブジェクト。読み取るデータを識別するトピック(TopicDscription)をアプリケーションに登録し、サブスクライバーが受信したデータにアクセスする。 DataReaderListener.DataReaderに割り当てられたリスナー。 DataReaderQoS.DataReaderのQoSを定義する構造体。 SampleInfo.「read」または「taken」された各サンプルに付随する情報。 #include \u0026lt;fastdds/dds/domain/DomainParticipant.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/domain/DomainParticipantFactory.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/DataReader.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/DataReaderListener.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/qos/DataReaderQos.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/SampleInfo.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/subscriber/Subscriber.hpp\u0026gt;\r#include \u0026lt;fastdds/dds/topic/TypeSupport.hpp\u0026gt; 次の行では、サブスクライバを実装する HelloWorldSubscriber クラスを定義している。\nclass HelloWorldSubscriber クラスのプライベートデータメンバから初めて、データリーダーリスナーの実装に言及する価値がある。 クラスのプライベートメンバは、参加者、サブスクライバー、トピック、DataReader、およびデータ型になる。DataWriterの場合と同じように、リスナーはイベントが発生した場合に実行されるコールバックを実装する。 SubListenerの最初のオーバーライドされたコールバックは on_subscription_mached()であり、これはDataWriterの on_publication_mached()コールバックのアナログである。\nvoid on_subscription_matched(\rDataReader*,\rconst SubscriptionMatchedStatus\u0026amp; info) override\r{\rif (info.current_count_change == 1)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Subscriber matched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse if (info.current_count_change == -1)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Subscriber unmatched.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\relse\r{\rstd::cout \u0026lt;\u0026lt; info.current_count_change\r\u0026lt;\u0026lt; \u0026#34; is not a valid value for SubscriptionMatchedStatus current count change\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\r} 2番目のオーバーライドされたコールバックは、on_data_available()である。このコールバックでは、DataReaderがアクセスできる次の受信したサンプルが取り込まれ、その内容が表示されるように処理される。 ここｋで、SampleInfoクラスのオブジェクトが定義され、サンプルが既に読み込まれたか、取り込まれたかを判断する。サンプルが読み込まれるたびに、受信したサンプルのカウンタが増加する。\nvoid on_data_available(\rDataReader* reader) override\r{\rSampleInfo info;\rif (reader-\u0026gt;take_next_sample(\u0026amp;hello_, \u0026amp;info) == eprosima::fastdds::dds::RETCODE_OK)\r{\rif (info.valid_data)\r{\rsamples_++;\rstd::cout \u0026lt;\u0026lt; \u0026#34;Message: \u0026#34; \u0026lt;\u0026lt; hello_.message() \u0026lt;\u0026lt; \u0026#34; with index: \u0026#34; \u0026lt;\u0026lt; hello_.index()\r\u0026lt;\u0026lt; \u0026#34; RECEIVED.\u0026#34; \u0026lt;\u0026lt; std::endl;\r}\r}\r} クラスのパブリック・コンストラクタとデストラクタを以下に定義する。\nHelloWorldSubscriber()\r: participant_(nullptr)\r, subscriber_(nullptr)\r, topic_(nullptr)\r, reader_(nullptr)\r, type_(new HelloWorldPubSubType())\r{\r}\rvirtual ~HelloWorldSubscriber()\r{\rif (reader_ != nullptr)\r{\rsubscriber_-\u0026gt;delete_datareader(reader_);\r}\rif (topic_ != nullptr)\r{\rparticipant_-\u0026gt;delete_topic(topic_);\r}\rif (subscriber_ != nullptr)\r{\rparticipant_-\u0026gt;delete_subscriber(subscriber_);\r}\rDomainParticipantFactory::get_instance()-\u0026gt;delete_participant(participant_); 次に、サブスクライバの初期化パブリックメンバ関数が来る。これは、HelloWorldPublisherで定義された初期化パブリックメンバ関数と同じである。 参加者を除くすべてのエンティティのQoS構成は、デフォルトのQoS(PARTICIPANT_QOS_DEFAULT、SUBSCRIBER_QOS_DEFAULT、TOPIC_QOS_DEFAULT、DATAREADER_QOS_DEFAULT)である。 各DDSエンティティのQoSデフォルト値は、DDS標準で確認できる。\n//!Initialize the subscriber\rbool init()\r{\rDomainParticipantQos participantQos;\rparticipantQos.name(\u0026#34;Participant_subscriber\u0026#34;);\rparticipant_ = DomainParticipantFactory::get_instance()-\u0026gt;create_participant(0, participantQos);\rif (participant_ == nullptr)\r{\rreturn false;\r}\r// Register the Type\rtype_.register_type(participant_);\r// Create the subscriptions Topic\rtopic_ = participant_-\u0026gt;create_topic(\u0026#34;HelloWorldTopic\u0026#34;, \u0026#34;HelloWorld\u0026#34;, TOPIC_QOS_DEFAULT);\rif (topic_ == nullptr)\r{\rreturn false;\r}\r// Create the Subscriber\rsubscriber_ = participant_-\u0026gt;create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);\rif (subscriber_ == nullptr)\r{\rreturn false;\r}\r// Create the DataReader\rreader_ = subscriber_-\u0026gt;create_datareader(topic_, DATAREADER_QOS_DEFAULT, \u0026amp;listener_);\rif (reader_ == nullptr)\r{\rreturn false;\r}\rreturn true; パブリックメンバ関数 run()は、全てのサンプルが受信されるまでサブスクライバを確実に実行する。このメンバ関数は、CPUを楽にするために100msのスリープ間隔を持つサブスクライバのアクティブな待機を実装する。\n//!Run the Subscriber\rvoid run(\ruint32_t samples)\r{\rwhile (listener_.samples_ \u0026lt; samples)\r{\rstd::this_thread::sleep_for(std::chrono::milliseconds(100));\r} 最後に、サブスクライバを実装する参加者が初期化され、mainで実行される。\n};\rint main(\rint argc,\rchar** argv)\r{\rstd::cout \u0026lt;\u0026lt; \u0026#34;Starting subscriber.\u0026#34; \u0026lt;\u0026lt; std::endl;\ruint32_t samples = 10;\rHelloWorldSubscriber* mysub = new HelloWorldSubscriber();\rif (mysub-\u0026gt;init())\r{\rmysub-\u0026gt;run(samples);\r}\rdelete mysub; 1.3.8.2 CMakeLists.txt # 先ほど作成したCMakeLists.txtファイルの最後に、以下のコードスニペットをインクルードする。これにより、実行ファイルのビルドに必要な全てのソースファイルが追加され、実行ファイルとライブラリがリンクされる。\nadd_executable(DDSHelloWorldSubscriber src/HelloWorldSubscriber.cpp ${DDS_HELLOWORLD_SOURCES_CXX})\rtarget_link_libraries(DDSHelloWorldSubscriber fastdds fastcdr) この時点で、プロジェクトはサブスクライバーアプリケーションのビルド、コンパイル、および実行の準備が整った。 ワークスペースのビルドディレクトリから、以下のコマンドを実行する。\ncmake ..\rcmake --build .\r./DDSHelloWorldSubscriber 1.3.9 実行 # 最後に、ビルドディレクトリから、パブリッシャーとサブスクライバーのアプリケーションを2つのターミナルから実行する。\n./DDSHelloWorldPublisher\r./DDSHelloWorldSubscriber お使いのブラウザはビデオタグをサポートしていません。\r1.3.10 要約 # このチュートリアルでは、パブリッシャーとサブスクライバーのDDSアプリケーションを作成した。また、ソースコードをコンパイルするためのCMakeファイルのビルド方法と、FastDDSおよびFastCDRライブラリをプロジェクトにインクルードして使用する方法を学習した。\n1.3.11 次のステップ # eProsima FastDDSのGithubリポジトリには、多くのユースケースやシナリオに対応したDDS通信を実装した、より複雑なサンプルがある。こちらにある。\n","externalUrl":null,"permalink":"/fastdds_manual/writhingpubsubapp/","section":"記事一覧","summary":"\u003ch2 class=\"relative group\"\u003e1.3 シンプルなC++パブリッシャーとサブスクライバーアプリケーションの作成 \n    \u003cdiv id=\"13-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AAc%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E3%81%A8%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%90%E3%83%BC%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#13-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AAc%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E3%81%A8%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%90%E3%83%BC%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eこのセクションでは、C++APIを使用してシンプルなFastDDSアプリケーションをパブリッシャーとサブスクライバーで作成する方法を段階的に説明する。また、eProsima Fast DDS-Genツールを用いて、このセクションで実装されているものと同様の例を自動生成することも可能である。\nこの追加のアプローチは、「パブリッシュ/サブスクライバーアプリケーションの構築」で説明されている。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e1.3.1 背景 \n    \u003cdiv id=\"131-%E8%83%8C%E6%99%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#131-%E8%83%8C%E6%99%AF\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eDDSは、DCPSモデルを実装するデータ中心の通信ミドルウェアである。このモデルは、データを生成する要素であるパブリッシャーと、データを消費するサブスクライバーの開発に基づいている。\nこれらのエンティティは、トピックを介して通信する。トピックは両方のDDSエンティティを結びつける要素である。パブリッシャーはトピックの下で情報を生成し、サブスクライバーは同じトピックをサブスクライブして情報を受け取る。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e1.3.2 前提条件 \n    \u003cdiv id=\"132-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#132-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eまず、eProsima FastDDSとそのすべての依存関係をインストールするために、インストールマニュアルに記載されている手順に従う必要がある。また、eProsima FastDDS-Genツールのインストールについても、インストールマニュアルに記載されている手順を完了している必要がある。\nこのチュートリアルで提供されている全てのコマンドは、Linux環境用に記述されている。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e1.3.3 アプリケーションワークスペースの作成 \n    \u003cdiv id=\"133-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#133-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eプロジェクトの最後には、アプリケーションワークスペースは以下の構造を持つことになる。\n\u003ccode\u003ebuild/DDSHelloWorldPublisher \u003c/code\u003eと \u003ccode\u003ebuild/DDSHelloWorldSubscriber\u003c/code\u003eは、それぞれパブリッシャーとサブスクライバーアプリケーションである。\u003c/p\u003e","title":"1章 シンプルなC++パブリッシャーとサブスクライバーアプリケーションの作成","type":"fastdds_manual"},{"content":"","externalUrl":null,"permalink":"/tags/2%E7%AB%A0/","section":"Tags","summary":"","title":"2章","type":"tags"},{"content":" 2 ライブラリーの概要 # FastDDS(旧FastRTPS)は、分散アプリケーションソフトウェアのためのデータ中心通信ミドルウェア(DCPS)であるDDS仕様の効率的で高性能な実装である。\nこのセクションでは、FastDDSのアーキテクチャ、動作、および主な機能について説明する。\n2.1 アーキテクチャ # 高速DDSのアーキテクチャは下図のようになっており、以下のような異なる環境を持つレイヤーモデルを見ることができる。\nアプリケーションレイヤー:分散システムにおける通信の実装にFastDDSAPIを使用するユーザーアプリケーション。 FastDDSレイヤー:DDS通信ミドルウェアの堅牢な実装。同一ドメイン内のDo0mainParticipantがドメイントピックの下でパブリッシュ/サブスクライブすることでメッセージを交換する、１つまたは複数のDDSドメインの展開を可能にする。 RTPSレイヤー:DDSアプリケーションとの相互運用性のためのRTPS(Real-Time Publish-Subscribe)プロトコルの実装。このレイヤーは、トランスポートレイヤーの抽象化レイヤーとして機能する。 トランスポートレイヤー:FastDDSは、信頼性の低いトランスポートプロトコル(UDP)、信頼性の高いトランスポートプロトコル(TCP)、共有メモリトランスポートプロトコル(SHM)など、様々なトランスポートプロトコル上で使用できる。 2.1 DDSレイヤー # FastDDSのDDSレイヤーでは、通信のためのいくつかの重要な要素が定義されている。ユーザーはアプリケーションでこれらの要素を作成しDDSアプリケーション要素を組み込んでデータ中心の通信システムを作成する。\nFastDDSは、DDS使用に従い、通信に関わるこれらの要素をエンティティとして定義する。DDSエンティティとは、QoS(Quality of Service)設定をサポートし、リスナーを実装するオブジェクトのことである。\nQoS: 各エンティティの動作が定義されるメカニズム。 リスナー: アプリケーションの実行中に発生する可能性があるイベントをエンティティに通知するメカニズム。 以下に、DDSエンティティをその説明と機能とともに列挙する。 各エンティティの詳細、QoS、リスナーについてはDDSレイヤーの項を参照。\nドメイン :DDSドメインを識別する正の整数。各 DomainParticipant には割り当てられた DDS ドメインがあり、同じドメイン内の DomainParticipant が通信したり、DDS ドメイン間の通信を分離したりできる。この値は、アプリケーション開発者がDomainParticipantsを作成するときに指定する必要がある。\nDomainParticipant :パブリッシャー、サブスクライバー、トピック、マルチトピックなどの他のDDSエンティティを含むオブジェクト。これは、それが含む以前のエンティティの作成と、それらの動作の設定を可能にするエンティティである。\nパブリッシャー :パブリッシャーは、データをトランスポートに書き込むDataWriterを使用して、トピックの下にデータをパブリッシュする。これは、それが含むDataWriterエンティティの作成と設定を行うエンティティであり、1つまたは複数のエンティティを含むことができる。\nDataWriter :メッセージの発行を担当するエンティティ。ユーザは、このエンティティを作成するときに、データが発行されるトピックを指定する必要がある。発行は、データオブジェクトを DataWriterHistory の変更として書き込むことで行われる。\nDataWriterHistory :これは、データオブジェクトに対する変更のリストである。DataWriter が特定の トピックの下でデータの発行に進むと、実際にこのデータに変更が作成される。履歴に登録されるのはこの変更である。これらの変更は、特定のTopicを購読しているDataReaderに送信される。\nサブスクライバ :サブスクライバは、トランスポートからデータを読み取る DataReader を使用して、トピックをサブスクライブする。これは、それが含む DataReader エンティティを作成および構成するエンティティであり、1 つまたは複数の DataReader エンティティを含むことができる。\nDataReader :パブリケーション受信のためにトピックを購読するエンティティである。ユーザは、このエンティティの作成時にサブスクリプションTopicを提供しなければならない。DataReaderは、そのDataReaderHistoryの変更としてメッセージを受信する。\nDataReaderHistory :これは、DataReaderが特定のTopicをサブスクライブした結果として受信したデータオブジェクトの変更を含んでいる。\nトピック :パブリッシャの DataWriter とサブスクライバの DataReader を結合するエンティティ。\n2.1.2 RTPSレイヤー # 前述のように、Fast DDSのRTPSプロトコルは、トランスポートレイヤーからDDSアプリケーションエンティティを抽象化することができる。 上のグラフによると、RTPSレイヤには4つの主要エンティティがある。\nRTPSドメイン RTPSプロトコルに対するDDSドメインの拡張。 RTPSParticipant 他のRTPSエンティティを含むエンティティ。それを含むエンティティのコンフィギュレーションと作成を可能にする。 RTPSWriter メッセージのソース。DataWriterHistoryに書き込まれた変更を読み取り、以前にマッチした全てのRTPSReaderへ送信する。 RTPSReader メッセージの受信エンティティ。RTPSWriterによって報告された変更をDataReaderHistoryに書き込む。 2.1.3 トランスポートレイヤー # FastDDSは、さまざまなトランスポートプロトコル上でのアプリケーションの実装をサポートしている。 UDPv4、UDPv6、TCPv4、TCPv6、およびシェアードメモリトランスポート（SHM）である。 デフォルトでは、DomainParticipantはUDPv4とSHMトランスポートプロトコルを実装する。 サポートされているすべてのトランスポートプロトコルのコンフィギュレーションは、 トランスポートレイヤーのセクションで詳しく説明されている。\n2.2 プログラミングと実行モデル # FastDDSは同時実行及びイベントベースである。以下では、FastDDSの動作を支配するマルチスレッドも出ると、起こりえるイベントについて説明する。\n2.2.1 並行処理とマルチスレッド # FastDDSは並行マルチスレッドを実装している。各DomainParticipantは、ロギング、メッセージ受信、非同期通信などのバックグラウンドタスクを処理するスレッドのセットを生成する。\nつまり、FastDDSAPIはスレッドセーフなので、異なるスレッドから同じDomainParticipantのメソッドを呼びだすことができる。\nただし、外部関数がライブラリ内で実装されているスレッドによって変更されるリソースにアクセスする場合は、このマルチスレッド実装を考慮する必要がある。\nFastDDSによって生成されるスレッドの完全なセットを以下に示す。トランスポート関連のスレッド (UDP、TCP、SHM タイプとしてマークされる) は、適切なトランスポートが使用される場合にのみ作成される。\n名前\r種類\rカーディナリティ\rOSスレッド名\r説明\rEvent\r一般\rドメインパーティシパントごとに1つ\rdds.ev.\u0026lt;participant_id\u0026gt;\r定期的およびトリガーされた時間イベントを処理する。\n詳細はDomainParticipantQosを参照。\rDiscovery Server Event\r一般\rドメインパーティシパントごとに1つ\rdds.ds_ev.\u0026lt;participant_id\u0026gt;\rDiscovery Serverデータベースへのアクセスを同期する。\n詳細はDomainParticipantQosを参照。\rAsynchronous Writer\r一般\r有効な非同期フローコントローラごとに1つ。最小1つ。\rdds.asyn.\u0026lt;participant_id\u0026gt;.\u0026lt;async_flow_controller_index\u0026gt;\r非同期書き込みを管理する。同期ライターであっても、いくつかの通信形式はバックグラウンドで開始する必要がある。\n詳細はDomainParticipantQosおよびFlowControllersQosを参照。\rDatasharing Listener\r一般\rデータリーダーごとに1つ\rdds.dsha.\u0026lt;reader_id\u0026gt;\rDatasharingを介して受信したメッセージを処理するリスナースレッド。\n詳細はDataReaderQosを参照。\rReception (UDP)\rUDP\rポートごとに1つ\rdds.udp.\u0026lt;port\u0026gt;\r受信したUDPメッセージを処理するリスナースレッド。\n詳細はTransportConfigQosおよびUDPTransportDescriptorを参照。\rReception (TCP)\rTCP\rTCP接続ごとに1つ\rdds.tcp.\u0026lt;port\u0026gt;\r受信したTCPメッセージを処理するリスナースレッド。\n詳細はTCPTransportDescriptorを参照。\rAccept (TCP)\rTCP\rTCPトランスポートごとに1つ\rdds.tcp_accept\r受信したTCP接続要求を処理するスレッド。\n詳細はTCPTransportDescriptorを参照。\rKeep Alive (TCP)\rTCP\rTCPトランスポートごとに1つ\rdds.tcp_keep\rTCP接続のためのキープアライブスレッド。\n詳細はTCPTransportDescriptorを参照。\rReception (SHM)\rSHM\rポートごとに1つ\rdds.shm.\u0026lt;port\u0026gt;\rSHMセグメント経由で受信したメッセージを処理するリスナースレッド。\n詳細はTransportConfigQosおよびSharedMemTransportDescriptorを参照。\rLogging (SHM)\rSHM\rポートごとに1つ\rdds.shmd.\u0026lt;port\u0026gt;\r転送されたパケットをファイルに記録・ダンプする。\n詳細はTransportConfigQosおよびSharedMemTransportDescriptorを参照。\rWatchdog (SHM)\rSHM\r1つ\rdds.shm.wdog\r開いている共有メモリセグメントの状態を監視する。\n詳細はTransportConfigQosおよびSharedMemTransportDescriptorを参照。\rGeneral Logging\rログ\r1つ\rdds.log\r消費者ログにエントリを蓄積し、適切なログに書き込む。\n詳細はLogging Threadを参照。\rSecurity Logging\rログ\rドメインパーティシパントごとに1つ\rdds.slog.\u0026lt;participant_id\u0026gt;\rセキュリティログエントリを蓄積し、書き込む。\n詳細はDomainParticipantQosを参照。\rWatchdog (Filewatch)\rファイル監視\r1つ\rdds.fwatch\r監視対象ファイルの変更ステータスを追跡する。\n詳細はDomainParticipantFactoryQosを参照。\rCallback (Filewatch)\rファイル監視\r1つ\rdds.fwatch.cb\r監視対象ファイルの変更時に登録されたコールバックを実行する。\n詳細はDomainParticipantFactoryQosを参照。\rReception (TypeLookup Service)\r型ルックアップサービス\rドメインパーティシパントごとに2つ\rdds.tls.replies.\u0026lt;participant_id\u0026gt;\ndds.tls.requests.\u0026lt;participant_id\u0026gt;\r未知のデータ型でリモートエンドポイントのディスカバリ情報を受信したときに動作する。\rこれらのスレッドの中には、特定の条件が満たされたときにのみ発生するものもある：\nDatasharingリスナースレッドは、Datasharingが使用されている場合にのみ作成される。 Discovery Serverイベントスレッドは、DomainParticipantがDiscovery Server SERVERとして構成されている場合にのみ作成される。 TCPキープアライブスレッドでは、キープアライブ期間を0より大きい値に構成する必要がある。 セキュリティロギングおよび共有メモリパケットロギングスレッドでは、どちらも特定の構成オプションを有効にする必要がある。 Filewatchスレッドは、FASTDDS_ENVIRONMENT_FILEが使用されている場合にのみ生成される。 トランスポートスレッドに関して、FastDDSはデフォルトでUDPto共有メモリトランスポートの両方を使用する。ポート構成は展開の特定のニーズに合わせて構成できるが、デフォルトの構成では常にメタトラフィックポートとユニキャストユーザートラフィックポートを使用する。\nTCPはマルチキャストをサポートしていないため、これはUDPと共有メモリの両方に適用される。\nFastDDSは、ThreadSettingsによって、作成するスレッドの特定の属性を設定することができる。\n2.2.2 イベント駆動型アーキテクチャ # FastDDSが特定の状態に反応したり、定期的なオペレーションをスケジュールしたりすることを可能にするタイムイベントシステムがある。これらのほとんどはDDSとRTPSメタデータに関連するため、ユーザーにはほとんど見えない。しかし、ユーザーはTimedEventクラスを継承することで、アプリケーションで周期的なタイムイベントを定義することができる。\n2.3 機能 # Fast DDSには、ユーザーがアプリケーションに実装して設定できる追加機能がいくつかある。 その概要は以下の通り。\n2.3.1 ディスカバリープロトコル # ディスカバリープロトコルは、あるトピックの下で発行するDataWriterと、同じトピックをサブスクライブするDataReaderをマッチングさせ、データの共有を開始させるメカニズムを定義する。これは通信プロセスのどの時点でも定義される。\nFastDDSは以下のディスカバリーメカニズムを定義する:\n**シンプルディスカバリー。**これはRTPS標準に定義されているデフォルトのディスカバリメカニズムであり、他のDDS実装との互換性を提供する。ここでは、DomainParticipantはそれらが実装するDataWriterとDataReaderに続いて一致するように、早い段階で個別に発見される。 **ディスカバリーサーバー。**このディスカバリメカニズムは集中型のディスカバリアーキテクチャを使用し、サーバーはメタトラフィックディスカバリのハブとして機能する。 **スタティックディスカバリ。**これはDomainParticipant同士のディスカバリを実装するが、各 DomainParticipantに含まれるエンティティ(DataReader/DataWriter)のディスカバリをスキップすることが可能である。 手動ディスカバリ。 このメカニズムはRTPSレイヤーのみと互換性がある。 これは、外部メタ情報チャネルを使用して、RTPSParticipants、 RTPSWriters、RTPSReadersのマッチングとアンマッチを手動で行うことを可能にする。 Fast DDSに実装されているすべてのディスカバリープロトコルの詳細な説明と設定は、ディスカバリーセクションを参照。\n2.3.2 セキュリティ # FastDDSは、3つのレベルでプラグイン可能なセキュリティを実装することにより、安全な通信を提供するように構成することができる。\nリモートDomainParticipantsの認証。 DDS:Auth:PKI-DHプラグインは、信頼できる認証局（CA）とECDSAデジタル署名アルゴリズムを使用して認証を行い、相互認証を実行する。 また、鍵合意プロトコルとして楕円曲線ディフィー・ヘルマン（ECDH）またはMODP-2048ディフィー・ヘルマン（DH）を使用して共有秘密を確立する。 エンティティのアクセス制御。 DDS:Access:Permissionsプラグインは、DDSドメインおよびトピックレベルでのDomainParticipantsへのアクセス制御を提供する。 データの暗号化。 DDS:Crypto:AES-GCM-GMACプラグインは、ガロアカウンターモード（AES-GCM）のAdvanced Encryption Standard（AES）を使用した認証暗号化を提供する。 2.3.3 ロギング # FastDDSは、拡張可能なロギングシステムを提供する。Logクラスはロギングシステムのエントリーポイントである。使いやすいように3つのマクロ定義を公開している: EPROSIMA_LOG_INFO、EPROSIMA_LOG_WARNING、EPROSIMA_LOG_ERROR さらに、既に利用可能なカテゴリ(INFO_MSG、WARN_MSG、ERROR_MSG)に加えて、新しいカテゴリを定義できる。正規表現を使ったカテゴリーに夜フィルタリングや、ロギングシステムの冗長性のコントロールも提供する。\n2.3.4 XMLプロファイル設定 # FastDDSでは、XMLプロファイル設定ファイルを使用してデフォルト設定を変更することができる。そのため、ユーザーがプログラムのソースコードを実装したり、既存のアプリケーションを再ビルドすることなく、DDSエンティティの動作を変更することができる。ユーザーは、API機能ごとにXMLタグを持つ。\nしたがって、\u0026lt;participant\u0026gt;タグを使用してDomainParticipantプロファイルを構築及び設定したり、\u0026lt;data_writer\u0026gt;タグと\u0026lt;data_reader\u0026gt;タグをそれぞれ使用してDataWriterプロファイルとDataReaderプロファイルを構築及び設定したりすることができる。\n2.3.5 環境変数 # 環境変数とは、OSの機能によってプログラムの範囲外で定義される関数のことである。ユーザーがDDSアプリケーションのデフォルト設定を簡単にカスタムできるように、FastDDSは環境変数に依存している。\n","externalUrl":null,"permalink":"/fastdds_manual/libraryoverview/","section":"記事一覧","summary":"\u003ch1 class=\"relative group\"\u003e2 ライブラリーの概要 \n    \u003cdiv id=\"2-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%BC%E3%81%AE%E6%A6%82%E8%A6%81\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#2-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%BC%E3%81%AE%E6%A6%82%E8%A6%81\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eFastDDS(旧FastRTPS)は、分散アプリケーションソフトウェアのためのデータ中心通信ミドルウェア(DCPS)であるDDS仕様の効率的で高性能な実装である。\u003cbr\u003e\nこのセクションでは、FastDDSのアーキテクチャ、動作、および主な機能について説明する。\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e2.1 アーキテクチャ \n    \u003cdiv id=\"21-%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#21-%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e高速DDSのアーキテクチャは下図のようになっており、以下のような異なる環境を持つレイヤーモデルを見ることができる。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eアプリケーションレイヤー\u003c/strong\u003e:分散システムにおける通信の実装にFastDDSAPIを使用するユーザーアプリケーション。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFastDDSレイヤー\u003c/strong\u003e:DDS通信ミドルウェアの堅牢な実装。同一ドメイン内のDo0mainParticipantがドメイントピックの下でパブリッシュ/サブスクライブすることでメッセージを交換する、１つまたは複数のDDSドメインの展開を可能にする。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRTPSレイヤー\u003c/strong\u003e:DDSアプリケーションとの相互運用性のためのRTPS(Real-Time Publish-Subscribe)プロトコルの実装。このレイヤーは、トランスポートレイヤーの抽象化レイヤーとして機能する。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eトランスポートレイヤー\u003c/strong\u003e:FastDDSは、信頼性の低いトランスポートプロトコル(UDP)、信頼性の高いトランスポートプロトコル(TCP)、共有メモリトランスポートプロトコル(SHM)など、様々なトランスポートプロトコル上で使用できる。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        src=\"/fastdds_manual/libraryoverview/library_overview.svg\"\n        alt=\"library_overview\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e2.1 DDSレイヤー \n    \u003cdiv id=\"21-dds%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#21-dds%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eFastDDSのDDSレイヤーでは、通信のためのいくつかの重要な要素が定義されている。ユーザーはアプリケーションでこれらの要素を作成しDDSアプリケーション要素を組み込んでデータ中心の通信システムを作成する。\u003cbr\u003e\nFastDDSは、DDS使用に従い、通信に関わるこれらの要素をエンティティとして定義する。DDSエンティティとは、QoS(Quality of Service)設定をサポートし、リスナーを実装するオブジェクトのことである。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eQoS\u003c/strong\u003e: 各エンティティの動作が定義されるメカニズム。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eリスナー\u003c/strong\u003e: アプリケーションの実行中に発生する可能性があるイベントをエンティティに通知するメカニズム。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下に、DDSエンティティをその説明と機能とともに列挙する。 各エンティティの詳細、QoS、リスナーについてはDDSレイヤーの項を参照。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eドメイン\u003c/strong\u003e :DDSドメインを識別する正の整数。各 DomainParticipant には割り当てられた DDS ドメインがあり、同じドメイン内の DomainParticipant が通信したり、DDS ドメイン間の通信を分離したりできる。この値は、アプリケーション開発者がDomainParticipantsを作成するときに指定する必要がある。\u003c/p\u003e","title":"2章 ライブラリーの概要","type":"fastdds_manual"},{"content":"","externalUrl":null,"permalink":"/tags/3.1%E7%AB%A0/","section":"Tags","summary":"","title":"3.1章","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/3%E7%AB%A0/","section":"Tags","summary":"","title":"3章","type":"tags"},{"content":"eProsima Fast DDSは、2つの異なるAPIを公開し、異なるレベルで通信サービスと相互作用する。 メインのAPIは、Data Distribution Service (DDS) Data-Centric Publish-Subscribe (DCPS) Platform Independent Model (PIM) API、略してDDS DCPS PIMで、Fast DDSが準拠しているData Distribution Service (DDS) version 1.4仕様で定義されている。 このセクションでは、Fast DDS の下でこの API の主な特徴と使用モードについて説明し、この API が分割された 5 つのモジュールについて詳しく説明する：\nコア: 他のモジュールによって洗練される抽象クラスとインターフェースを定義する。また、QoS(Quality of Service)の定義や、ミドルウェアとの通知ベースのインタラクションスタイルのサポートも提供する。 ドメイン: DomainParticipantクラスが含まれ、サービスのエントリーポイントとして、また多くのクラスのファクトリーとして機能する。DomainParticipantは、サービスを構成する他のオブジェクトのコンテナとしても機能する。 パブリッシャー: PublisherクラスとDataWriterクラス、PublisherListenerインターフェースとDataWriterListenerインターフェースなど、発行側で使用されるクラスについて説明する。 サブスクライバー: SubscriberクラスとDataReaderクラス、およびSubscriberListenerインターフェースとDataReaderLsetenerインターフェースなど、サブスクリプション側で使用されるクラスについて説明する。 トピック: TopicとTopicDescriptionクラスなど、通信トピックとデータ型を定義に使用されるクラスについて説明する。 ","externalUrl":null,"permalink":"/fastdds_manual/ddslayer/","section":"記事一覧","summary":"\u003cp\u003eeProsima Fast DDSは、2つの異なるAPIを公開し、異なるレベルで通信サービスと相互作用する。 メインのAPIは、Data Distribution Service (DDS) Data-Centric Publish-Subscribe (DCPS) Platform Independent Model (PIM) API、略してDDS DCPS PIMで、Fast DDSが準拠しているData Distribution Service (DDS) version 1.4仕様で定義されている。 このセクションでは、Fast DDS の下でこの API の主な特徴と使用モードについて説明し、この API が分割された 5 つのモジュールについて詳しく説明する：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eコア: 他のモジュールによって洗練される抽象クラスとインターフェースを定義する。また、QoS(Quality of Service)の定義や、ミドルウェアとの通知ベースのインタラクションスタイルのサポートも提供する。\u003c/li\u003e\n\u003cli\u003eドメイン: \u003ccode\u003eDomainParticipant\u003c/code\u003eクラスが含まれ、サービスのエントリーポイントとして、また多くのクラスのファクトリーとして機能する。DomainParticipantは、サービスを構成する他のオブジェクトのコンテナとしても機能する。\u003c/li\u003e\n\u003cli\u003eパブリッシャー: \u003ccode\u003ePublisher\u003c/code\u003eクラスと\u003ccode\u003eDataWriter\u003c/code\u003eクラス、\u003ccode\u003ePublisherListener\u003c/code\u003eインターフェースと\u003ccode\u003eDataWriterListener\u003c/code\u003eインターフェースなど、発行側で使用されるクラスについて説明する。\u003c/li\u003e\n\u003cli\u003eサブスクライバー: \u003ccode\u003eSubscriber\u003c/code\u003eクラスと\u003ccode\u003eDataReader\u003c/code\u003eクラス、および\u003ccode\u003eSubscriberListener\u003c/code\u003eインターフェースと\u003ccode\u003eDataReaderLsetener\u003c/code\u003eインターフェースなど、サブスクリプション側で使用されるクラスについて説明する。\u003c/li\u003e\n\u003cli\u003eトピック: \u003ccode\u003eTopic\u003c/code\u003eと\u003ccode\u003eTopicDescription\u003c/code\u003eクラスなど、通信トピックとデータ型を定義に使用されるクラスについて説明する。\u003c/li\u003e\n\u003c/ul\u003e","title":"3章 DDSレイヤー","type":"fastdds_manual"},{"content":" 3.1.1. エンティティ # エンティティは、全てのDDSエンティティの抽象ベースクラスであり、QoSポリシー、リスナー、ステータスをサポートするオブジェクトを意味する。\n3.1.1.1 エンティティの型 # DomainParticipant： このエンティティは、サービスのエントリ・ポイントであり、パブリッシャ、サブスクライバ、およびトピックのファクトリとして機能する。 Publisher： 任意の数の DataWriters を作成できるファクトリとして動作する。 Subscriber : 任意の数の DataWriters を作成できるファクトリとして動作する。 topic : このエンティティは、パブリケーション・エンティティとサブスクリプション・エンティティの間に位置し、チャネルとして機能する。 DataWriter : データ配布を担当するオブジェクト。 DataReader : 受信したデータにアクセスするためのオブジェクト。 以下の図は、全てのDDSエンティティ間の階層を示している:\n3.1.1.2 共通するエンティティの特徴 # 全てのエンティティ型には、エンティティの概念に共通するいくつかの特徴がある。以下に示す。\n3.1.1.2.1 エンティティ識別子 # 各エンティティは一意のIDで識別され、このIDはDDSエンティティおよび対応するRTPSエンティティが存在する場合はそのエンティティ間で共有される。 このIDはEntity基底クラスで宣言されたインスタンスハンドルオブジェクトに格納され、ゲッター関数get_instance_handle()を使用してアクセスできる。\n3.1.1.2.2 QoSポリシー # 各エンティティの動作は、設定ポリシーのセットで設定できる。 各エンティティタイプには、対応するQoS（Quality of Service）クラスがあり、当該エンティティタイプに影響するすべてのポリシーがグループ化されている。 ユーザーは、これらのQoSクラスのインスタンスを作成し、含まれているポリシーを必要に応じて変更し、エンティティの作成時または後で、すべてのエンティティが公開しているset_qos()関数（DomainParticipant::set_qos()、Publisher::set_qos()、Subscriber::set_qos()、Topic::set_qos()、DataWriter::set_qos()、DataReader::set_qos()）を使用して、エンティティを設定するために使用できます。 QoSクラスとその中に含まれるポリシーについては、各エンティティ・タイプのドキュメントで説明されています。\n3.1.1.2.3 リスナー # リスナーは、エンティティがイベントに応答して呼び出す関数を持つオブジェクトである。 したがって、リスナーは、エンティティの Status の変更をアプリケーションに通知するための非同期通知システムとして機能する。 すべてのエンティティ・タイプは、Status の変更をアプリケーションに通知するためにエンティティがトリガーするコールバック関数を含む抽象リスナー・インターフェースを定義している。 ユーザーは、これらのインタフェースを継承した独自のリスナーを実装し、アプリケーションで必要なコールバックを実装することができる。 その後、これらのリスナーを各エンティティの作成時または後で、各エンティティが公開する set_listener() 関数で各エンティティにリンクできる（DomainParticipant::set_listener(), Publisher::set_listener(), Subscriber::set_listener(), Topic::set_listener(), DataWriter::set_listener(), DataReader::set_listener()）。 各エンティティ・タイプが持つリスナー・インターフェースとそのコールバックは、各エンティティ・タイプのドキュメントで説明されている。 イベントが発生すると、NULL でなく、StatusMask で対応するコールバックが有効になっているリスナーを持つ最下位レベルのエンティティによって処理される。 次の図に示すように、上位レベルのリスナーは下位レベルのリスナーを継承する：\nメモ\ron_data_on_readers()コールバックは、on_data_available()の前にメッセージを傍受する。 これは、DomainParticipantListenerが有効になっている場合、ユーザーはデフォルトでリスナーがStatusMask::all()を使用することを考慮する必要があることを意味する。 コールバック・エンティティの階層が保持されるので、on_data_on_readers()がこの場合に呼び出されることになる。 アプリケーションが代わりにon_data_available()を使いたい場合は、StatusMaskの対応するビットを無効にする必要がある。\r重要\rエンティティの作成時に``` StatusMask::none() ```を使用すると、DDS 標準コールバックが無効になる：\r- ```on_sample_rejected()```\r- ```on_liveliness_changed()```\r- ```on_requested_deadline_missed()```\r- ```on_requested_incompatible_qos()```\r- ```on_data_available()```\r- ```on_subscription_matched()```\r- ```on_sample_lost()```\r- ```on_offered_incompatible_qos()```\r- ```on_offered_deadline_missed()```\r- ```on_liveliness_lost()```\r- ```on_publication_matched()```\r- ```on_inconsistent_topic()```\r- ```on_data_on_readers()```\rFastDDS固有のコールバックは常に有効：\non_participant_discovery() onParticipantAuthentication() on_data_reader_discovery() on_data_writer_discovery() on_unacknowledged_sample_removed() 注意\r実装されたリスナーごとに1つのスレッドのみが作成されるため、 リスナー関数をシンプルに保ち、そのような情報の処理を適切なクラスに任せること。\rListener メンバ関数のスコープ内で Entity を生成または削除しないこと。 その代わりに、Listener クラスを情報チャネルとして使用し、上位の Entity クラスでそのような振る舞いをカプセル化することを推奨する。\n3.1.1.2.4 ステータス # 各エンティティは、そのエンティティの通信ステータスを表すステータスオブジェクトのセットに関連付けられている。 これらのステータス値の変更は、アプリケーションに非同期に通知するための適切なリスナーコールバックの呼び出しをトリガーする。 すべてのステータスオブジェクトのリストとその内容の説明は Status を参照すること。 また、どのステータスがどのエンティティタイプに適用されるかを見つけることもできる。\n3.1.1.2.5 StatusCondition # すべてのエンティティは StatusCondition を所有しており、有効なステータスが変更されるたびに通知される。StatusCondition は、エンティティと待機セット間のリンクを提供する。詳細については、「条件と待機セット」セクションを参照すること。\n3.1.1.2.6 エンティティの有効化 # すべてのエンティティは、有効または無効のいずれかで作成できる。 デフォルトでは、ファクトリはエンティティを有効化して作成するように構成されているが、有効化されたファクトリでEntityFactoryQosPolicyを使用して変更できる。 無効化されたファクトリは、QoS に関係なく無効化されたエンティティを作成する。 無効にされたエンティティの操作は次のものに制限される。\nエンティティの QoS ポリシーの設定/取得。 エンティティのリスナーの設定/取得。 サブエンティティの作成/削除。 エンティティのステータスの取得（変更されない場合も）。 ルックアップ操作。 この状態で呼び出された他の関数は NOT_ENABLED を返す。\n","externalUrl":null,"permalink":"/fastdds_manual/ddslayer/3_1core/entity/","section":"記事一覧","summary":"\u003ch2 class=\"relative group\"\u003e3.1.1. エンティティ \n    \u003cdiv id=\"311-%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#311-%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eエンティティは、全てのDDSエンティティの抽象ベースクラスであり、QoSポリシー、リスナー、ステータスをサポートするオブジェクトを意味する。\u003c/p\u003e\n\n\n\u003ch3 class=\"relative group\"\u003e3.1.1.1 エンティティの型 \n    \u003cdiv id=\"3111-%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3%E3%81%AE%E5%9E%8B\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#3111-%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3%E3%81%AE%E5%9E%8B\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDomainParticipant\u003c/strong\u003e： このエンティティは、サービスのエントリ・ポイントであり、パブリッシャ、サブスクライバ、およびトピックのファクトリとして機能する。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePublisher\u003c/strong\u003e： 任意の数の DataWriters を作成できるファクトリとして動作する。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSubscriber\u003c/strong\u003e : 任意の数の DataWriters を作成できるファクトリとして動作する。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etopic\u003c/strong\u003e : このエンティティは、パブリケーション・エンティティとサブスクリプション・エンティティの間に位置し、チャネルとして機能する。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDataWriter\u003c/strong\u003e : データ配布を担当するオブジェクト。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDataReader\u003c/strong\u003e : 受信したデータにアクセスするためのオブジェクト。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下の図は、全てのDDSエンティティ間の階層を示している:\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        src=\"/fastdds_manual/ddslayer/3_1core/entity/entity_diagram.svg\"\n        alt=\"entity_diagram\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch4 class=\"relative group\"\u003e3.1.1.2 共通するエンティティの特徴 \n    \u003cdiv id=\"3112-%E5%85%B1%E9%80%9A%E3%81%99%E3%82%8B%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3%E3%81%AE%E7%89%B9%E5%BE%B4\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#3112-%E5%85%B1%E9%80%9A%E3%81%99%E3%82%8B%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3%E3%81%AE%E7%89%B9%E5%BE%B4\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\u003cp\u003e全てのエンティティ型には、エンティティの概念に共通するいくつかの特徴がある。以下に示す。\u003c/p\u003e","title":"3章 エンティティ","type":"fastdds_manual"},{"content":" 3.1 コア # このモジュールでは、他のモジュールd絵使用されるインフラストラクチャクラスとタイプを定義する。\nエンティティクラス、QoSポリシー、およびステータスの定義が含まれる。\nエンティティ: エンティティは、ステータスを持ち、ポリシーを設定できるDDS通信オブジェクトである。 ポリシー: ポリシーは、エンティティの動作を制御する各構成オブジェクトである。 ステータス: エンティティに関連する各オブジェクトで、その値はエンティティの通信ステータスを表す。 ","externalUrl":null,"permalink":"/fastdds_manual/ddslayer/3_1core/","section":"記事一覧","summary":"\u003ch1 class=\"relative group\"\u003e3.1 コア \n    \u003cdiv id=\"31-%E3%82%B3%E3%82%A2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#31-%E3%82%B3%E3%82%A2\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003eこのモジュールでは、他のモジュールd絵使用されるインフラストラクチャクラスとタイプを定義する。\u003cbr\u003e\nエンティティクラス、QoSポリシー、およびステータスの定義が含まれる。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eエンティティ\u003c/strong\u003e: エンティティは、ステータスを持ち、ポリシーを設定できるDDS通信オブジェクトである。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eポリシー\u003c/strong\u003e: ポリシーは、エンティティの動作を制御する各構成オブジェクトである。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eステータス\u003c/strong\u003e: エンティティに関連する各オブジェクトで、その値はエンティティの通信ステータスを表す。\u003c/li\u003e\n\u003c/ul\u003e","title":"3章 コア","type":"fastdds_manual"},{"content":" 3.1.2. ポリシー # サービス品質（QoS）はサービスの動作を指定するために使用され、ユーザーは各エンティティがどのように動作するかを定義することができる。 システムの柔軟性を高めるため、QoSは複数のQoSポリシーに分割され、それぞれ独立に設定できる。 ただし、複数のポリシーが競合する場合もある。 各Qosポリシーは、QosPolicyId_t列挙子で定義された一意のIDを持つ。 このIDは、一部のStatusインスタンスで、Statusが参照する特定のQos Policyを識別するために使用される。 QoS Policyには不変のものがあり、エンティティの作成時またはenable操作を呼び出す前にのみ指定できる。 各DSエンティティは、標準QoS Policy、XTypes拡張、およびeProsima拡張を混在させることができるQoS Policyの特定のセットを持つ。\n","externalUrl":null,"permalink":"/fastdds_manual/ddslayer/3_1core/policy/","section":"記事一覧","summary":"\u003ch2 class=\"relative group\"\u003e3.1.2. ポリシー \n    \u003cdiv id=\"312-%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#312-%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eサービス品質（QoS）はサービスの動作を指定するために使用され、ユーザーは各エンティティがどのように動作するかを定義することができる。 システムの柔軟性を高めるため、QoSは複数のQoSポリシーに分割され、それぞれ独立に設定できる。 ただし、複数のポリシーが競合する場合もある。 各Qosポリシーは、QosPolicyId_t列挙子で定義された一意のIDを持つ。 このIDは、一部のStatusインスタンスで、Statusが参照する特定のQos Policyを識別するために使用される。 QoS Policyには不変のものがあり、エンティティの作成時またはenable操作を呼び出す前にのみ指定できる。 各DSエンティティは、標準QoS Policy、XTypes拡張、およびeProsima拡張を混在させることができるQoS Policyの特定のセットを持つ。\u003c/p\u003e","title":"3章 ポリシー","type":"fastdds_manual"},{"content":" 3.1.2.1. 標準的なQoSポリシー # このセクションでは、DDS標準の各QoSポリシーについて説明する：\nDeadlineQosPolicy DestinationOrderQosPolicy DurabilityQosPolicy DurabilityServiceQosPolicy EntityFactoryQosPolicy GroupDataQosPolicy HistoryQosPolicy LatencyBudgetQosPolicy LifespanQosPolicy LivelinessQosPolicy OwnershipQosPolicy OwnershipStrengthQosPolicy PartitionQosPolicy PresentationQosPolicy ReaderDataLifecycleQosPolicy ReliabilityQosPolicy ResourceLimitsQosPolicy TimeBasedFilterQosPolicy TopicDataQosPolicy TransportPriorityQosPolicy UserDataQosPolicy WriterDataLifecycleQosPolicy 3.1.2.1.1. DeadlineQosPolicy # このQoSポリシーは、新しいサンプルの頻度がある閾値を下回るとアラームを発する。 これは、データが定期的に更新されることが期待される場合に便利である（DeadlineQosPolicyを参照）。\n公開側では、期限はアプリケーションが新しいサンプルを供給することが期待される最大期間を定義する。\nキーを持つトピックの場合、このQoSはキーごとに適用される。 ある車両の位置を定期的に公開する必要があるとする。 その場合、データ型のキーとして車両のIDを設定し、期限QoSを希望する公開期間に設定することが可能である。\nQoS Policyデータメンバー一覧：\nデータメンバ名 型 デフォルト値 period Duration_t c_TimeInfinite 互換性ルール # DataReaderとDataWriterのDeadlineQosPolicy間の互換性を維持するために、（DataWriterに設定された）オファーされた期限期間は、（DataReaderに設定された）要求された期限期間以下でなければならない。\nDeadlineQosPolicyは TimeBasedFilterQosPolicy と一貫して設定する必要がある。つまり、期限は 期間は最小間隔以上でなければならない。\n例 # C++\nDataWriterQos writer_qos;\r// The DeadlineQosPolicy is constructed with an infinite period by default\r// Change the period to 1 second\rwriter_qos.deadline().period.seconds = 1;\rwriter_qos.deadline().period.nanosec = 0;\r// Use modified QoS in the creation of the corresponding entity\rwriter_ = publisher_-\u0026gt;create_datawriter(topic_, writer_qos);```\r\u0026lt;/detail\u0026gt;\r\u0026lt;detail\u0026gt;\u0026lt;summary\u0026gt;XML\u0026lt;/summary\u0026gt; \u0026lt;data_writer profile_name=\u0026ldquo;writer_xml_conf_deadline_profile\u0026rdquo;\u0026gt; 1 \u0026lt;/data_writer\u0026gt;\n\u0026lt;data_reader profile_name=\u0026ldquo;reader_xml_conf_deadline_profile\u0026rdquo;\u0026gt; 1 \u0026lt;/data_reader\u0026gt;\n\u0026lt;/detail\u0026gt;\r#### 3.1.2.1.2 DeadlineQosPolicy\r複数のDataWriterが同じTopicで同じキーを使用してメッセージを送信することができ、DataReader側では、それらのメッセージはすべてデータの同じインスタンス内に格納される（DestinationOrderQosPolicyを参照）。このQoSポリシーは、それらのメッセージの論理的な順序を決定するために使用される基準を制御する。システムの動作は、DestinationOrderQosPolicyKind の値に依存する。\rQoS Policyデータメンバ一覧：\r|データメンバ名|型|デフォルト値|\r|---|---|--- |\r|```kind```|```DestinationOrderQosPolicyKind```|```BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS```|\r##### DestinationOrderQosPolicyKind\r可能な値は2つある(```DestinationOrderQosPolicyKind```参照)：\r- ```BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS```: これは、各DataReaderでの受信時刻に基づいてデータを並べ替えることを示す。 - ```BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS```：これは、メッセージが送信された時のDataWriterのタイムスタンプに基づいてデータを並べることを示す。 このオプションは最終値の一貫性を保証する。\rどちらのオプションもOwnershipQosPolicyとOwnershipStrengthQosPolicyの値に依存する。つまり、OwnershipがEXCLUSIVEに設定されていて、最後の値が所有権の強度が低いDataWriterから来たものであれば、それは破棄される。\r###### 互換性ルール\rDataReaderとDataWriterのDestinationOrderQosPolicyが異なるkind値を持つ場合の互換性を維持するために、 DataWriterのkindはDataReaderのkindより高いか等しくなければならない。 また、異なる種類の間の順序は、\r```BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS``` \u0026lt; ```BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS ```\r#### 3.1.2.1.3. DurabilityQosPolicy ","externalUrl":null,"permalink":"/fastdds_manual/ddslayer/3_1core/policy/standardqospolicy/","section":"記事一覧","summary":"\u003ch3 class=\"relative group\"\u003e3.1.2.1. 標準的なQoSポリシー \n    \u003cdiv id=\"3121-%E6%A8%99%E6%BA%96%E7%9A%84%E3%81%AAqos%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#3121-%E6%A8%99%E6%BA%96%E7%9A%84%E3%81%AAqos%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eこのセクションでは、DDS標準の各QoSポリシーについて説明する：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeadlineQosPolicy\u003c/li\u003e\n\u003cli\u003eDestinationOrderQosPolicy\u003c/li\u003e\n\u003cli\u003eDurabilityQosPolicy\u003c/li\u003e\n\u003cli\u003eDurabilityServiceQosPolicy\u003c/li\u003e\n\u003cli\u003eEntityFactoryQosPolicy\u003c/li\u003e\n\u003cli\u003eGroupDataQosPolicy\u003c/li\u003e\n\u003cli\u003eHistoryQosPolicy\u003c/li\u003e\n\u003cli\u003eLatencyBudgetQosPolicy\u003c/li\u003e\n\u003cli\u003eLifespanQosPolicy\u003c/li\u003e\n\u003cli\u003eLivelinessQosPolicy\u003c/li\u003e\n\u003cli\u003eOwnershipQosPolicy\u003c/li\u003e\n\u003cli\u003eOwnershipStrengthQosPolicy\u003c/li\u003e\n\u003cli\u003ePartitionQosPolicy\u003c/li\u003e\n\u003cli\u003ePresentationQosPolicy\u003c/li\u003e\n\u003cli\u003eReaderDataLifecycleQosPolicy\u003c/li\u003e\n\u003cli\u003eReliabilityQosPolicy\u003c/li\u003e\n\u003cli\u003eResourceLimitsQosPolicy\u003c/li\u003e\n\u003cli\u003eTimeBasedFilterQosPolicy\u003c/li\u003e\n\u003cli\u003eTopicDataQosPolicy\u003c/li\u003e\n\u003cli\u003eTransportPriorityQosPolicy\u003c/li\u003e\n\u003cli\u003eUserDataQosPolicy\u003c/li\u003e\n\u003cli\u003eWriterDataLifecycleQosPolicy\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch4 class=\"relative group\"\u003e3.1.2.1.1. DeadlineQosPolicy \n    \u003cdiv id=\"31211-deadlineqospolicy\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#31211-deadlineqospolicy\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\u003cp\u003eこのQoSポリシーは、新しいサンプルの頻度がある閾値を下回るとアラームを発する。 これは、データが定期的に更新されることが期待される場合に便利である（\u003ccode\u003eDeadlineQosPolicy\u003c/code\u003eを参照）。\u003cbr\u003e\n公開側では、期限はアプリケーションが新しいサンプルを供給することが期待される最大期間を定義する。\u003cbr\u003e\nキーを持つトピックの場合、このQoSはキーごとに適用される。 ある車両の位置を定期的に公開する必要があるとする。 その場合、データ型のキーとして車両のIDを設定し、期限QoSを希望する公開期間に設定することが可能である。\u003c/p\u003e\n\u003cp\u003eQoS Policyデータメンバー一覧：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eデータメンバ名\u003c/th\u003e\n          \u003cth\u003e型\u003c/th\u003e\n          \u003cth\u003eデフォルト値\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ccode\u003eperiod\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003eDuration_t\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003ec_TimeInfinite\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\u003ch5 class=\"relative group\"\u003e互換性ルール \n    \u003cdiv id=\"%E4%BA%92%E6%8F%9B%E6%80%A7%E3%83%AB%E3%83%BC%E3%83%AB\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BA%92%E6%8F%9B%E6%80%A7%E3%83%AB%E3%83%BC%E3%83%AB\" aria-label=\"アンカー\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h5\u003e\n\u003cp\u003eDataReaderとDataWriterのDeadlineQosPolicy間の互換性を維持するために、（DataWriterに設定された）オファーされた期限期間は、（DataReaderに設定された）要求された期限期間以下でなければならない。\u003c/p\u003e","title":"3章 標準的なQoSポリシー","type":"fastdds_manual"},{"content":"","externalUrl":null,"permalink":"/categories/fastdds_manual/","section":"Categories","summary":"","title":"FastDDS_Manual","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/weekly/","section":"週報一覧","summary":"","title":"週報一覧","type":"weekly"}]