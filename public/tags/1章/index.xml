<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1章 on じゃがびぃのサイト</title>
    <link>/tags/1%E7%AB%A0/</link>
    <description>Recent content in 1章 on じゃがびぃのサイト</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2025 じゃがびぃ</copyright>
    <atom:link href="/tags/1%E7%AB%A0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>1章 DDSとは何か、RTPSとは何か</title>
      <link>/fastdds_manual/whatisdds_rtps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fastdds_manual/whatisdds_rtps/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;1.1 DDSとは何か 
    &lt;div id=&#34;11-dds%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#11-dds%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;データ配信サービス（DDS）は、分散ソフトウェアアプリケーション通信に使用されるデータ中心の通信プロトコル。データプロバイダーとデータ消費者間の通信を可能にする通信アプリケーションプログラミングインターフェース（API）と通信セマンティクスを記述する。&lt;/p&gt;
&lt;p&gt;データ中心型パブリッシュ・サブスクライブ（DCPS）モデルであるため、その実装では3つの主要なアプリケーションエンティティが定義されている&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情報生成オブジェクトとその特性を定義するパブリケーションエンティティ&lt;/li&gt;
&lt;li&gt;情報消費オブジェクトとその特性を定義するサブスクリプションエンティティ&lt;/li&gt;
&lt;li&gt;トピックとして送信される情報の種類を定義し、パブリッシャーとサブスクライバーをそのサービス品質（QoS）特性とともに作成し、上記エンティティの正しい動作を保証する構成エンティティ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DDSはQoSを使用しDDSエンティティの動作特性を定義している。QoSは個々のQoSポリシー（QoSPolicyから派生した型のオブジェクト）で構成されている。これらは、&lt;a href=&#34;https://fast-dds.docs.eprosima.com/en/latest/fastdds/dds_layer/core/policy/policy.html#dds-layer-core-policy&#34; target=&#34;_blank&#34;&gt;Policy&lt;/a&gt;で説明されている。&lt;/p&gt;


&lt;h3 class=&#34;relative group&#34;&gt;1.1.1 DCPSの概念モデル 
    &lt;div id=&#34;111-dcps%E3%81%AE%E6%A6%82%E5%BF%B5%E3%83%A2%E3%83%87%E3%83%AB&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#111-dcps%E3%81%AE%E6%A6%82%E5%BF%B5%E3%83%A2%E3%83%87%E3%83%AB&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;DCPSモデルでは、通信アプリケーションシステムの開発のために4つの基本要素が定義されている。
1. パブリッシャー:
実装するDataWriterの作成と構成を担当するDCPSエンティティ。
DataWriterは実際のメッセージ公開を担当する。
各DataWriterには、メッセージが公開されるトピックが割り当てられる。
2. サブスクライバー:
サブスクライバーしているトピックの下で公開されたデータを受信する責任を持つDCPSエンティティ。
新しいデータの可用性をアプリケーションに通知する責任を持つDataReaderオブジェクトを1つ以上提供する。
3. トピック:
パブリッシャーとサブスクライバーを結びつけるエンティティ。
DDSドメイン内で一意。
TopicDescriptionを通じて、パブリッシャーとサブスクライバーのデータ型の統一性を可能にします。
4. ドメイン:
異なるトピックの下でデータを交換する、1つ以上のアプリケーションに属するすべてのパブリッシャーとサブスクライバーをリンクするために使用される概念。
ドメインに参加する個々のアケーションは、DomainParticipantと呼ばれる。
DDSドメインはドメインIDによって識別される。
DomainParticipantはドメインIDを定義して、所属するDDSドメインを指定する。
異なるIDを持つ2つのDomainParticipantは、ネットワーク上でお互いの存在を認識しない。したがって、複数の通信チャネルを作成できる。
これは、それぞれのDomainParticipantが互いに通信する複数のDDSアプリケーションを使用しているが、これらのアプリケーションが干渉してはならない際に適用される。
DomainParticipantは他のDCPSエンティティのコンテナとして機能し、パブリッシャー、サブスクライバー、およびトピックエンティティのファクトリとして機能し、ドメイン内で管理サービスを提供する。&lt;/p&gt;
&lt;p&gt;これらの要素は以下の図に示される。

    &lt;figure&gt;
      &lt;img
        class=&#34;my-0 rounded-md&#34;
        loading=&#34;lazy&#34;
        src=&#34;/fastdds_manual/whatisdds_rtps/dds_domain_ja.svg&#34;
        alt=&#34;DDSドメイン内のDCPSモデルエンティティ&#34;
      /&gt;
      
    &lt;/figure&gt;
&lt;/p&gt;


&lt;h2 class=&#34;relative group&#34;&gt;1.2 RTPSとは何か 
    &lt;div id=&#34;12-rtps%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#12-rtps%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;リアルタイムパブリッシュサブスクライブ（RTPS）プロトコルは、DDSアプリケーションをサポートするために開発され、UDPのようなベストエフォート型トランスポート上のパブ-サブ通信ミドルウェアである。&lt;br&gt;
さらに、Fast DDSはTCPと共有メモリ（SHM）トランスポートのサポートを提供している。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>1章 シンプルなC&#43;&#43;パブリッシャーとサブスクライバーアプリケーションの作成</title>
      <link>/fastdds_manual/writhingpubsubapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fastdds_manual/writhingpubsubapp/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;1.3 シンプルなC++パブリッシャーとサブスクライバーアプリケーションの作成 
    &lt;div id=&#34;13-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AAc%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E3%81%A8%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%90%E3%83%BC%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#13-%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AAc%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E3%81%A8%E3%82%B5%E3%83%96%E3%82%B9%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%90%E3%83%BC%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E6%88%90&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;このセクションでは、C++APIを使用してシンプルなFastDDSアプリケーションをパブリッシャーとサブスクライバーで作成する方法を段階的に説明する。また、eProsima Fast DDS-Genツールを用いて、このセクションで実装されているものと同様の例を自動生成することも可能である。
この追加のアプローチは、「パブリッシュ/サブスクライバーアプリケーションの構築」で説明されている。&lt;/p&gt;


&lt;h3 class=&#34;relative group&#34;&gt;1.3.1 背景 
    &lt;div id=&#34;131-%E8%83%8C%E6%99%AF&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#131-%E8%83%8C%E6%99%AF&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;DDSは、DCPSモデルを実装するデータ中心の通信ミドルウェアである。このモデルは、データを生成する要素であるパブリッシャーと、データを消費するサブスクライバーの開発に基づいている。
これらのエンティティは、トピックを介して通信する。トピックは両方のDDSエンティティを結びつける要素である。パブリッシャーはトピックの下で情報を生成し、サブスクライバーは同じトピックをサブスクライブして情報を受け取る。&lt;/p&gt;


&lt;h3 class=&#34;relative group&#34;&gt;1.3.2 前提条件 
    &lt;div id=&#34;132-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#132-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;まず、eProsima FastDDSとそのすべての依存関係をインストールするために、インストールマニュアルに記載されている手順に従う必要がある。また、eProsima FastDDS-Genツールのインストールについても、インストールマニュアルに記載されている手順を完了している必要がある。
このチュートリアルで提供されている全てのコマンドは、Linux環境用に記述されている。&lt;/p&gt;


&lt;h3 class=&#34;relative group&#34;&gt;1.3.3 アプリケーションワークスペースの作成 
    &lt;div id=&#34;133-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#133-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90&#34; aria-label=&#34;アンカー&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h3&gt;
&lt;p&gt;プロジェクトの最後には、アプリケーションワークスペースは以下の構造を持つことになる。
&lt;code&gt;build/DDSHelloWorldPublisher &lt;/code&gt;と &lt;code&gt;build/DDSHelloWorldSubscriber&lt;/code&gt;は、それぞれパブリッシャーとサブスクライバーアプリケーションである。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
